(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[687],{15503:function(f,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/mint",function(){return n(87446)}])},87446:function(f,e,n){"use strict";n.r(e),n.d(e,{default:function(){return I}});var t=n(97458),a=n(14134),r=n(82007),s=n(53556),o=n.n(s),d=(n(52983),n(23148)),i=n(83849),b=n.n(i),c=n(91479),l=n(49605),u=n(77513),p=JSON.parse('{"address":"0x610178dA211FEF7D417bC0e6FeD39F05609AD788","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"erc721Storage","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"erc721Storage","type":"address"}],"name":"ERC721StorageUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ercTwab","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getERC721Storage","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"preview","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"setMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"erc721Storage","type":"address"}],"name":"setStorage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xad7077a85aca641992b64ad5fbfb9683cf9bd4c1dba6b0952ac9ec93c018d019","receipt":{"to":null,"from":"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266","contractAddress":"0x610178dA211FEF7D417bC0e6FeD39F05609AD788","transactionIndex":0,"gasUsed":"2627590","logsBloom":"0xblockHash":"0x2f499b24da7d7f5b031338bced570ce52c9f9ec478d2c7ae9c3d8fc4914f195f","transactionHash":"0xad7077a85aca641992b64ad5fbfb9683cf9bd4c1dba6b0952ac9ec93c018d019","logs":[{"transactionIndex":0,"blockNumber":11,"transactionHash":"0xad7077a85aca641992b64ad5fbfb9683cf9bd4c1dba6b0952ac9ec93c018d019","address":"0x610178dA211FEF7D417bC0e6FeD39F05609AD788","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"],"data":"0x","logIndex":0,"blockHash":"0x2f499b24da7d7f5b031338bced570ce52c9f9ec478d2c7ae9c3d8fc4914f195f"}],"blockNumber":11,"cumulativeGasUsed":"2627590","status":1,"byzantium":true},"args":["Impact Card","CC","0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"],"numDeployments":1,"solcInputHash":"096887a7b2a5e19722325faa1a200224","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.15+commit.e14f2714\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"erc721Storage\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"approved\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"erc721Storage\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ERC721StorageUpdated\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"contractURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ercTwab\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getApproved\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getERC721Storage\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ownerOf\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"input\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"preview\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"minter\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMinter\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"erc721Storage\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setStorage\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokenURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC721-approve}.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC721-balanceOf}.\\"},\\"getApproved(uint256)\\":{\\"details\\":\\"See {IERC721-getApproved}.\\"},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC721-isApprovedForAll}.\\"},\\"mint(address)\\":{\\"params\\":{\\"to\\":\\"address - Address to mint to`\\"}},\\"name()\\":{\\"details\\":\\"See {IERC721Metadata-name}.\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"ownerOf(uint256)\\":{\\"details\\":\\"See {IERC721-ownerOf}.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"safeTransferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"safeTransferFrom(address,address,uint256,bytes)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC721-setApprovalForAll}.\\"},\\"supportsInterface(bytes4)\\":{\\"details\\":\\"See {IERC165-supportsInterface}.\\"},\\"symbol()\\":{\\"details\\":\\"See {IERC721Metadata-symbol}.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-transferFrom}.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"mint(address)\\":{\\"notice\\":\\"Mints a new token to the given address\\"},\\"tokenURI(uint256)\\":{\\"notice\\":\\"@dev Counterfactual initializeion of the smart contract balance.\\"}},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/ImpactCard.sol\\":\\"ImpactCard\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@erc721k/core-sol/contracts/ERC721Storage.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: GPL-3.0\\\\npragma solidity 0.8.15;\\\\n\\\\nimport { Base64 } from \\\\\\"base64-sol/base64.sol\\\\\\";\\\\nimport { Ownable } from \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport { IERC721KImage } from \\\\\\"./interfaces/IERC721KImage.sol\\\\\\";\\\\nimport { IERC721KTraits } from \\\\\\"./interfaces/IERC721KTraits.sol\\\\\\";\\\\nimport { Strings } from \\\\\\"@openzeppelin/contracts/utils/Strings.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title ERC721Storage\\\\n * @author Kames Geraghty\\\\n */\\\\nabstract contract ERC721Storage is Ownable {\\\\n  address internal _svgRender;\\\\n  address internal _traitsFetch;\\\\n  ContractURI internal _contractURI;\\\\n\\\\n  struct ContractURI {\\\\n    string name;\\\\n    string description;\\\\n    string image;\\\\n    string externalLink;\\\\n    string sellerFeeBasisPoints;\\\\n    string feeRecipient;\\\\n  }\\\\n\\\\n  event SvgRenderUpdated(address svgRender);\\\\n\\\\n  event TraitsFetchUpdated(address traitsFetch);\\\\n\\\\n  event ContractURIUpdated(ContractURI contractURI);\\\\n\\\\n  constructor(\\\\n    address _svgRender_,\\\\n    address _traitsFetch_,\\\\n    ContractURI memory _contractURI_\\\\n  ) {\\\\n    _svgRender = _svgRender_;\\\\n    _traitsFetch = _traitsFetch_;\\\\n    _contractURI = _contractURI_;\\\\n  }\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* Virtual Functions                                                                     */\\\\n  /* ===================================================================================== */\\\\n\\\\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\\\\n\\\\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* External Functions                                                                    */\\\\n  /* ===================================================================================== */\\\\n  function getSvgRender() external view returns (address) {\\\\n    return _svgRender;\\\\n  }\\\\n\\\\n  function getTraitsFetch() external view returns (address) {\\\\n    return _traitsFetch;\\\\n  }\\\\n\\\\n  function getContractDescription() external view returns (ContractURI memory) {\\\\n    return _contractURI;\\\\n  }\\\\n\\\\n  function render(bytes memory input) external view returns (string memory) {\\\\n    return IERC721KImage(_svgRender).render(input);\\\\n  }\\\\n\\\\n  function constructTokenURI(\\\\n    uint256 tokenId,\\\\n    bytes memory input0,\\\\n    bytes memory input1\\\\n  ) external view returns (string memory uri) {\\\\n    string memory image_ = IERC721KImage(_svgRender).render(input0);\\\\n    string memory traits_ = IERC721KTraits(_traitsFetch).fetch(input1);\\\\n    return\\\\n      string(\\\\n        abi.encodePacked(\\\\n          \\\\\\"data:application/json;base64,\\\\\\",\\\\n          Base64.encode(\\\\n            bytes(\\\\n              string.concat(\\\\n                \'{\\\\\\"name\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _parseName(tokenId),\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"description\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _parseDescription(tokenId),\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"image\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                image_,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"attributes\\\\\\": [\',\\\\n                traits_,\\\\n                \\\\\\"]\\\\\\",\\\\n                \\\\\\"}\\\\\\"\\\\n              )\\\\n            )\\\\n          )\\\\n        )\\\\n      );\\\\n  }\\\\n\\\\n  function constructContractURI() external view returns (string memory uri) {\\\\n    return\\\\n      string(\\\\n        abi.encodePacked(\\\\n          \\\\\\"data:application/json;base64,\\\\\\",\\\\n          Base64.encode(\\\\n            bytes(\\\\n              string.concat(\\\\n                \'{\\\\\\"name\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.name,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"description\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.description,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"image\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.image,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"externalLink\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.externalLink,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"sellerFeeBasisPoints\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.sellerFeeBasisPoints,\\\\n                \'\\\\\\",\',\\\\n                \'\\\\\\"feeRecipient\\\\\\":\',\\\\n                \'\\\\\\"\',\\\\n                _contractURI.feeRecipient,\\\\n                \'\\\\\\"\',\\\\n                \\\\\\"}\\\\\\"\\\\n              )\\\\n            )\\\\n          )\\\\n        )\\\\n      );\\\\n  }\\\\n\\\\n  function setSvgRender(address svgRender) external onlyOwner {\\\\n    _svgRender = svgRender;\\\\n    emit SvgRenderUpdated(svgRender);\\\\n  }\\\\n\\\\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\\\\n    _traitsFetch = traitsFetch;\\\\n    emit TraitsFetchUpdated(traitsFetch);\\\\n  }\\\\n\\\\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\\\\n    _contractURI = contractURI;\\\\n    emit ContractURIUpdated(contractURI);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8ed49f50f2314ec51dea0e1bd41ac4d962366e48edce4771dc16ebf27f976405\\",\\"license\\":\\"GPL-3.0\\"},\\"@erc721k/core-sol/contracts/interfaces/IERC721KImage.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\ninterface IERC721KImage {\\\\n  function render(bytes memory input) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8474249915bfc50221f4431b8853338ae27e8847ac3ef563dda437dd809a8846\\",\\"license\\":\\"MIT\\"},\\"@erc721k/core-sol/contracts/interfaces/IERC721KTraits.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\ninterface IERC721KTraits {\\\\n  function fetch(bytes memory input) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0e4ebc534cc1453dd57592eec64a3dc44377a30b98b6f33c780354a126481b5f\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        _checkOwner();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the sender is not the owner.\\\\n     */\\\\n    function _checkOwner() internal view virtual {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC721.sol\\\\\\";\\\\nimport \\\\\\"./IERC721Receiver.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC721Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Strings.sol\\\\\\";\\\\nimport \\\\\\"../../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\\\n * {ERC721Enumerable}.\\\\n */\\\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\\\n    using Address for address;\\\\n    using Strings for uint256;\\\\n\\\\n    // Token name\\\\n    string private _name;\\\\n\\\\n    // Token symbol\\\\n    string private _symbol;\\\\n\\\\n    // Mapping from token ID to owner address\\\\n    mapping(uint256 => address) private _owners;\\\\n\\\\n    // Mapping owner address to token count\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    // Mapping from token ID to approved address\\\\n    mapping(uint256 => address) private _tokenApprovals;\\\\n\\\\n    // Mapping from owner to operator approvals\\\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\\\n        return\\\\n            interfaceId == type(IERC721).interfaceId ||\\\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-balanceOf}.\\\\n     */\\\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\\\n        require(owner != address(0), \\\\\\"ERC721: address zero is not a valid owner\\\\\\");\\\\n        return _balances[owner];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-ownerOf}.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\\\n        address owner = _owners[tokenId];\\\\n        require(owner != address(0), \\\\\\"ERC721: invalid token ID\\\\\\");\\\\n        return owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-name}.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-symbol}.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-tokenURI}.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\\\n        _requireMinted(tokenId);\\\\n\\\\n        string memory baseURI = _baseURI();\\\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\\\n     * by default, can be overridden in child contracts.\\\\n     */\\\\n    function _baseURI() internal view virtual returns (string memory) {\\\\n        return \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-approve}.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) public virtual override {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        require(to != owner, \\\\\\"ERC721: approval to current owner\\\\\\");\\\\n\\\\n        require(\\\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\\\n            \\\\\\"ERC721: approve caller is not token owner nor approved for all\\\\\\"\\\\n        );\\\\n\\\\n        _approve(to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-getApproved}.\\\\n     */\\\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\\\n        _requireMinted(tokenId);\\\\n\\\\n        return _tokenApprovals[tokenId];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\\\n        _setApprovalForAll(_msgSender(), operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\\\n        return _operatorApprovals[owner][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-transferFrom}.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        //solhint-disable-next-line max-line-length\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: caller is not token owner nor approved\\\\\\");\\\\n\\\\n        _transfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        safeTransferFrom(from, to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: caller is not token owner nor approved\\\\\\");\\\\n        _safeTransfer(from, to, tokenId, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        _transfer(from, to, tokenId);\\\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `tokenId` exists.\\\\n     *\\\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Tokens start existing when they are minted (`_mint`),\\\\n     * and stop existing when they are burned (`_burn`).\\\\n     */\\\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\\\n        return _owners[tokenId] != address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\\\n        _safeMint(to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\\\n     */\\\\n    function _safeMint(\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        _mint(to, tokenId);\\\\n        require(\\\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\\\n            \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - `to` cannot be the zero address.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _mint(address to, uint256 tokenId) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC721: mint to the zero address\\\\\\");\\\\n        require(!_exists(tokenId), \\\\\\"ERC721: token already minted\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), to, tokenId);\\\\n\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(address(0), to, tokenId);\\\\n\\\\n        _afterTokenTransfer(address(0), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `tokenId`.\\\\n     * The approval is cleared when the token is burned.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _burn(uint256 tokenId) internal virtual {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n\\\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\\\n\\\\n        // Clear approvals\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[owner] -= 1;\\\\n        delete _owners[tokenId];\\\\n\\\\n        emit Transfer(owner, address(0), tokenId);\\\\n\\\\n        _afterTokenTransfer(owner, address(0), tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` from `from` to `to`.\\\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _transfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {\\\\n        require(ERC721.ownerOf(tokenId) == from, \\\\\\"ERC721: transfer from incorrect owner\\\\\\");\\\\n        require(to != address(0), \\\\\\"ERC721: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(from, to, tokenId);\\\\n\\\\n        // Clear approvals from the previous owner\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[from] -= 1;\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(from, to, tokenId);\\\\n\\\\n        _afterTokenTransfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `to` to operate on `tokenId`\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function _approve(address to, uint256 tokenId) internal virtual {\\\\n        _tokenApprovals[tokenId] = to;\\\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function _setApprovalForAll(\\\\n        address owner,\\\\n        address operator,\\\\n        bool approved\\\\n    ) internal virtual {\\\\n        require(owner != operator, \\\\\\"ERC721: approve to caller\\\\\\");\\\\n        _operatorApprovals[owner][operator] = approved;\\\\n        emit ApprovalForAll(owner, operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\\\n     */\\\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\\\n        require(_exists(tokenId), \\\\\\"ERC721: invalid token ID\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\\\n     * The call is not executed if the target address is not a contract.\\\\n     *\\\\n     * @param from address representing the previous owner of the given token ID\\\\n     * @param to target address that will receive the tokens\\\\n     * @param tokenId uint256 ID of the token to be transferred\\\\n     * @param data bytes optional data to send along with the call\\\\n     * @return bool whether the call correctly returned the expected magic value\\\\n     */\\\\n    function _checkOnERC721Received(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory data\\\\n    ) private returns (bool) {\\\\n        if (to.isContract()) {\\\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\\\n                return retval == IERC721Receiver.onERC721Received.selector;\\\\n            } catch (bytes memory reason) {\\\\n                if (reason.length == 0) {\\\\n                    revert(\\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n                } else {\\\\n                    /// @solidity memory-safe-assembly\\\\n                    assembly {\\\\n                        revert(add(32, reason), mload(reason))\\\\n                    }\\\\n                }\\\\n            }\\\\n        } else {\\\\n            return true;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any token transfer. This includes minting\\\\n     * and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - When `from` and `to` are both non-zero, ``from``\'s `tokenId` will be\\\\n     * transferred to `to`.\\\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\\\n     * - When `to` is zero, ``from``\'s `tokenId` will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {}\\\\n\\\\n    /**\\\\n     * @dev Hook that is called after any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _afterTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC721 compliant contract.\\\\n */\\\\ninterface IERC721 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\\\n     */\\\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of tokens in ``owner``\'s account.\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @dev Returns the owner of the `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\\\n     * The approval is cleared when the token is transferred.\\\\n     *\\\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The caller must own the token or be an approved operator.\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Approve or remove `operator` as an operator for the caller.\\\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The `operator` cannot be the caller.\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool _approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the account approved for `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\\\n\\\\n    /**\\\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\\\n     *\\\\n     * See {setApprovalForAll}\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title ERC721 token receiver interface\\\\n * @dev Interface for any contract that wants to support safeTransfers\\\\n * from ERC721 asset contracts.\\\\n */\\\\ninterface IERC721Receiver {\\\\n    /**\\\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\\\n     * by `operator` from `from`, this function is called.\\\\n     *\\\\n     * It must return its Solidity selector to confirm the token transfer.\\\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\\\n     *\\\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\\\n     */\\\\n    function onERC721Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC721.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\\\n */\\\\ninterface IERC721Metadata is IERC721 {\\\\n    /**\\\\n     * @dev Returns the token collection name.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the token collection symbol.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.1;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\\\\n     *\\\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\\\n     * constructor.\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize/address.code.length, which returns 0\\\\n        // for contracts in construction, since the code is only stored at the end\\\\n        // of the constructor execution.\\\\n\\\\n        return account.code.length > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n                /// @solidity memory-safe-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\"0123456789abcdef\\\\\\";\\\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        // Inspired by OraclizeAPI\'s implementation - MIT licence\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\n\\\\n        if (value == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 digits;\\\\n        while (temp != 0) {\\\\n            digits++;\\\\n            temp /= 10;\\\\n        }\\\\n        bytes memory buffer = new bytes(digits);\\\\n        while (value != 0) {\\\\n            digits -= 1;\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\n            value /= 10;\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        if (value == 0) {\\\\n            return \\\\\\"0x00\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 length = 0;\\\\n        while (temp != 0) {\\\\n            length++;\\\\n            temp >>= 8;\\\\n        }\\\\n        return toHexString(value, length);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\"0\\\\\\";\\\\n        buffer[1] = \\\\\\"x\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\n            value >>= 4;\\\\n        }\\\\n        require(value == 0, \\\\\\"Strings: hex length insufficient\\\\\\");\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(address addr) internal pure returns (string memory) {\\\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\"},\\"base64-sol/base64.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity >=0.6.0;\\\\n\\\\n/// @title Base64\\\\n/// @author Brecht Devos - <brecht@loopring.org>\\\\n/// @notice Provides functions for encoding/decoding base64\\\\nlibrary Base64 {\\\\n    string internal constant TABLE_ENCODE = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\\\\n    bytes  internal constant TABLE_DECODE = hex\\\\\\"0000000000000000000000000000000000000000000000000000000000000000\\\\\\"\\\\n                                            hex\\\\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\\\\"\\\\n                                            hex\\\\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\\\\"\\\\n                                            hex\\\\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\\\\";\\\\n\\\\n    function encode(bytes memory data) internal pure returns (string memory) {\\\\n        if (data.length == 0) return \'\';\\\\n\\\\n        // load the table into memory\\\\n        string memory table = TABLE_ENCODE;\\\\n\\\\n        // multiply by 4/3 rounded up\\\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\\\n\\\\n        // add some extra buffer at the end required for the writing\\\\n        string memory result = new string(encodedLen + 32);\\\\n\\\\n        assembly {\\\\n            // set the actual output length\\\\n            mstore(result, encodedLen)\\\\n\\\\n            // prepare the lookup table\\\\n            let tablePtr := add(table, 1)\\\\n\\\\n            // input ptr\\\\n            let dataPtr := data\\\\n            let endPtr := add(dataPtr, mload(data))\\\\n\\\\n            // result ptr, jump over length\\\\n            let resultPtr := add(result, 32)\\\\n\\\\n            // run over the input, 3 bytes at a time\\\\n            for {} lt(dataPtr, endPtr) {}\\\\n            {\\\\n                // read 3 bytes\\\\n                dataPtr := add(dataPtr, 3)\\\\n                let input := mload(dataPtr)\\\\n\\\\n                // write 4 characters\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\\\n                resultPtr := add(resultPtr, 1)\\\\n            }\\\\n\\\\n            // padding with \'=\'\\\\n            switch mod(mload(data), 3)\\\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n\\\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\\\n        bytes memory data = bytes(_data);\\\\n\\\\n        if (data.length == 0) return new bytes(0);\\\\n        require(data.length % 4 == 0, \\\\\\"invalid base64 decoder input\\\\\\");\\\\n\\\\n        // load the table into memory\\\\n        bytes memory table = TABLE_DECODE;\\\\n\\\\n        // every 4 characters represent 3 bytes\\\\n        uint256 decodedLen = (data.length / 4) * 3;\\\\n\\\\n        // add some extra buffer at the end required for the writing\\\\n        bytes memory result = new bytes(decodedLen + 32);\\\\n\\\\n        assembly {\\\\n            // padding with \'=\'\\\\n            let lastBytes := mload(add(data, mload(data)))\\\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\\\n                decodedLen := sub(decodedLen, 1)\\\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\\\n                    decodedLen := sub(decodedLen, 1)\\\\n                }\\\\n            }\\\\n\\\\n            // set the actual output length\\\\n            mstore(result, decodedLen)\\\\n\\\\n            // prepare the lookup table\\\\n            let tablePtr := add(table, 1)\\\\n\\\\n            // input ptr\\\\n            let dataPtr := data\\\\n            let endPtr := add(dataPtr, mload(data))\\\\n\\\\n            // result ptr, jump over length\\\\n            let resultPtr := add(result, 32)\\\\n\\\\n            // run over the input, 4 characters at a time\\\\n            for {} lt(dataPtr, endPtr) {}\\\\n            {\\\\n               // read 4 characters\\\\n               dataPtr := add(dataPtr, 4)\\\\n               let input := mload(dataPtr)\\\\n\\\\n               // write 3 bytes\\\\n               let output := add(\\\\n                   add(\\\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\\\n                   add(\\\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\\\n                    )\\\\n                )\\\\n                mstore(resultPtr, shl(232, output))\\\\n                resultPtr := add(resultPtr, 3)\\\\n            }\\\\n        }\\\\n\\\\n        return result;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\\",\\"license\\":\\"MIT\\"},\\"contracts/ERC721K.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\nimport { Ownable } from \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport { ERC721 } from \\\\\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\\\\";\\\\nimport { ERC721Storage } from \\\\\\"@erc721k/core-sol/contracts/ERC721Storage.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title ERC721K\\\\n * @author Kames Geraghty\\\\n */\\\\nabstract contract ERC721K is ERC721, Ownable {\\\\n  /// @notice ID counter for ERC721 tokens\\\\n  uint256 internal _idCounter;\\\\n\\\\n  /// @notice ErC721Storage instance\\\\n  address internal _erc721Storage;\\\\n\\\\n  event ERC721StorageUpdated(address erc721Storage);\\\\n\\\\n  /**\\\\n   * @notice ERC721K Construction\\\\n   * @param name_ string - Name of ERC721 token\\\\n   * @param symbol_ string - Symbol of ERC721 token\\\\n   * @param _erc721Storage_ address - Metadata instance\\\\n   */\\\\n  constructor(\\\\n    string memory name_,\\\\n    string memory symbol_,\\\\n    address _erc721Storage_\\\\n  ) ERC721(name_, symbol_) {\\\\n    _erc721Storage = _erc721Storage_;\\\\n  }\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* EIP Functions                                                                     */\\\\n  /* ===================================================================================== */\\\\n  function supportsInterface(bytes4 interfaceId)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override(ERC721)\\\\n    returns (bool)\\\\n  {\\\\n    return super.supportsInterface(interfaceId);\\\\n  }\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* Virtual Functions                                                                     */\\\\n  /* ===================================================================================== */\\\\n  function _tokenData(uint256 tokenId)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (bytes memory imageBytes, bytes memory traitsBytes);\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* External Functions                                                                    */\\\\n  /* ===================================================================================== */\\\\n\\\\n  function contractURI() external view returns (string memory) {\\\\n    return ERC721Storage(_erc721Storage).constructContractURI();\\\\n  }\\\\n\\\\n  function totalSupply() external view returns (uint256) {\\\\n    return _idCounter;\\\\n  }\\\\n\\\\n  function getERC721Storage() external view returns (address) {\\\\n    return _erc721Storage;\\\\n  }\\\\n\\\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\\\n    (bytes memory imageBytes, bytes memory traitsBytes) = _tokenData(tokenId);\\\\n    return ERC721Storage(_erc721Storage).constructTokenURI(tokenId, imageBytes, traitsBytes);\\\\n  }\\\\n\\\\n  /* ====================================== */\\\\n  /* Writes\\\\n  /* ====================================== */\\\\n\\\\n  function setStorage(address erc721Storage) external onlyOwner {\\\\n    _erc721Storage = erc721Storage;\\\\n    emit ERC721StorageUpdated(erc721Storage);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x6c1006ab04c5c3ec72397d7b75f6a581137f47812020739da050ec4d5b9317c5\\",\\"license\\":\\"MIT\\"},\\"contracts/ImpactCard.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\nimport { ERC721K } from \\\\\\"./ERC721K.sol\\\\\\";\\\\nimport { ERC721Storage } from \\\\\\"@erc721k/core-sol/contracts/ERC721Storage.sol\\\\\\";\\\\nimport { ISVGRender } from \\\\\\"./interfaces/ISVGRender.sol\\\\\\";\\\\n\\\\ncontract ImpactCard is ERC721K {\\\\n  address public ercTwab;\\\\n\\\\n  address private _minter;\\\\n\\\\n  constructor(\\\\n    string memory name,\\\\n    string memory symbol,\\\\n    address erc721Storage\\\\n  ) ERC721K(name, symbol, erc721Storage) {}\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* Override Functions                                                                    */\\\\n  /* ===================================================================================== */\\\\n\\\\n  /**\\\\n   * @notice\\\\n   * @dev Counterfactual initializeion of the smart contract balance.\\\\n   */\\\\n\\\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\\\n    bytes memory imageData = bytes(abi.encode(\\\\\\"kames.eth\\\\\\"));\\\\n    return ISVGRender(ERC721Storage(_erc721Storage).getSvgRender()).render(imageData);\\\\n  }\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* External Functions                                                                    */\\\\n  /* ===================================================================================== */\\\\n\\\\n  // --------------------------------------\\\\n  // READS\\\\n  // --------------------------------------\\\\n\\\\n  function preview(bytes memory input) external view returns (string memory) {\\\\n    bytes memory traitsData = bytes(abi.encode(\\\\\\"0x00\\\\\\"));\\\\n    return ISVGRender(ERC721Storage(_erc721Storage).getSvgRender()).render(traitsData);\\\\n  }\\\\n\\\\n  // --------------------------------------\\\\n  // WRITES\\\\n  // --------------------------------------\\\\n\\\\n  /**\\\\n   * @notice Mints a new token to the given address\\\\n   * @param to address - Address to mint to`\\\\n   */\\\\n  function mint(address to) external {\\\\n    unchecked {\\\\n      _mint(to, _idCounter++);\\\\n    }\\\\n  }\\\\n\\\\n  function setMinter(address minter) external onlyOwner {\\\\n    _minter = minter;\\\\n  }\\\\n\\\\n  /* ===================================================================================== */\\\\n  /* Internal Functions                                                                    */\\\\n  /* ===================================================================================== */\\\\n\\\\n  function _tokenData(uint256 tokenId)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (bytes memory, bytes memory)\\\\n  {\\\\n    bytes memory imageData = bytes(abi.encode(\\\\\\"0x0\\\\\\"));\\\\n    bytes memory traitsData = bytes(abi.encode(\\\\\\"0x0\\\\\\"));\\\\n    return (imageData, traitsData);\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37696dc0fe18fac4ee1adacdabcb1bae5c86587d9f7dfa9676cca05feb16e75c\\",\\"license\\":\\"MIT\\"},\\"contracts/interfaces/ISVGRender.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity 0.8.15;\\\\n\\\\ninterface ISVGRender {\\\\n  function render(bytes memory input) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x40b1890b472a84f0867a826065039eb787f1f3c4f1a79a71b877752c70152967\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604051620034093803806200340983398181016040528101906200003791906200039f565b828282828281600090816200004d919062000684565b5080600190816200005f919062000684565b5050506200008262000076620000cf60201b60201c565b620000d760201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050506200076b565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020682620001bb565b810181811067ffffffffffffffff82111715620002285762000227620001cc565b5b80604052505050565b60006200023d6200019d565b90506200024b8282620001fb565b919050565b600067ffffffffffffffff8211156200026e576200026d620001cc565b5b6200027982620001bb565b9050602081019050919050565b60005b83811015620002a657808201518184015260208101905062000289565b83811115620002b6576000848401525b50505050565b6000620002d3620002cd8462000250565b62000231565b905082815260208101848484011115620002f257620002f1620001b6565b5b620002ff84828562000286565b509392505050565b600082601f8301126200031f576200031e620001b1565b5b815162000331848260208601620002bc565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000367826200033a565b9050919050565b62000379816200035a565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b600080600060608486031215620003bb57620003ba620001a7565b5b600084015167ffffffffffffffff811115620003dc57620003db620001ac565b5b620003ea8682870162000307565b935050602084015167ffffffffffffffff8111156200040e576200040d620001ac565b5b6200041c8682870162000307565b92505060406200042f8682870162000388565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200048c57607f821691505b602082108103620004a257620004a162000444565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200050c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004cd565b620005188683620004cd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005656200055f620005598462000530565b6200053a565b62000530565b9050919050565b6000819050919050565b620005818362000544565b6200059962000590826200056c565b848454620004da565b825550505050565b600090565b620005b0620005a1565b620005bd81848462000576565b505050565b5b81811015620005e557620005d9600082620005a6565b600181019050620005c3565b5050565b601f8211156200063457620005fe81620004a8565b6200060984620004bd565b8101602085101562000619578190505b620006316200062885620004bd565b830182620005c2565b50505b505050565b600082821c905092915050565b6000620006596000198460080262000639565b1980831691505092915050565b600062000674838362000646565b9150826002028217905092915050565b6200068f8262000439565b67ffffffffffffffff811115620006ab57620006aa620001cc565b5b620006b7825462000473565b620006c4828285620005e9565b600060209050601f831160018114620006fc5760008415620006e7578287015190505b620006f3858262000666565b86555062000763565b601f1984166200070c86620004a8565b60005b8281101562000736578489015182556001820191506020850194506020810190506200070f565b8683101562000756578489015162000752601f89168262000646565b8355505b6001600288020188555050505b505050505050565b612c8e806200077b6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806387a89ee6116100c3578063b88d4fde1161007c578063b88d4fde146103b3578063c87b56dd146103cf578063e8a3d485146103ff578063e985e9c51461041d578063f2fde38b1461044d578063fca3b5aa1461046957610158565b806387a89ee6146102f15780638da5cb5b1461030f5780639137c1a71461032d57806395d89b4114610349578063a22cb46514610367578063b35173501461038357610158565b806342842e0e1161011557806342842e0e146102315780636352211e1461024d5780636a6278421461027d57806370a0823114610299578063715018a6146102c957806383c5b8d3146102d357610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db57806318160ddd146101f757806323b872dd14610215575b600080fd5b61017760048036038101906101729190611bea565b610485565b6040516101849190611c32565b60405180910390f35b610195610497565b6040516101a29190611ce6565b60405180910390f35b6101c560048036038101906101c09190611d3e565b610529565b6040516101d29190611dac565b60405180910390f35b6101f560048036038101906101f09190611df3565b61056f565b005b6101ff610686565b60405161020c9190611e42565b60405180910390f35b61022f600480360381019061022a9190611e5d565b610690565b005b61024b60048036038101906102469190611e5d565b6106f0565b005b61026760048036038101906102629190611d3e565b610710565b6040516102749190611dac565b60405180910390f35b61029760048036038101906102929190611eb0565b6107c1565b005b6102b360048036038101906102ae9190611eb0565b6107de565b6040516102c09190611e42565b60405180910390f35b6102d1610895565b005b6102db6108a9565b6040516102e89190611dac565b60405180910390f35b6102f96108cf565b6040516103069190611dac565b60405180910390f35b6103176108f9565b6040516103249190611dac565b60405180910390f35b61034760048036038101906103429190611eb0565b610923565b005b6103516109a6565b60405161035e9190611ce6565b60405180910390f35b610381600480360381019061037c9190611f09565b610a38565b005b61039d6004803603810190610398919061207e565b610a4e565b6040516103aa9190611ce6565b60405180910390f35b6103cd60048036038101906103c891906120c7565b610b89565b005b6103e960048036038101906103e49190611d3e565b610beb565b6040516103f69190611ce6565b60405180910390f35b610407610d26565b6040516104149190611ce6565b60405180910390f35b6104376004803603810190610432919061214a565b610dc3565b6040516104449190611c32565b60405180910390f35b61046760048036038101906104629190611eb0565b610e57565b005b610483600480360381019061047e9190611eb0565b610eda565b005b600061049082610f26565b9050919050565b6060600080546104a6906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546104d2906121b9565b801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b5050505050905090565b600061053482611008565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061057a82610710565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e19061225c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610609611053565b73ffffffffffffffffffffffffffffffffffffffff161480610638575061063781610632611053565b610dc3565b5b610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e906122ee565b60405180910390fd5b610681838361105b565b505050565b6000600754905090565b6106a161069b611053565b82611114565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612380565b60405180910390fd5b6106eb8383836111a9565b505050565b61070b83838360405180602001604052806000815250610b89565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af906123ec565b60405180910390fd5b80915050919050565b6107db81600760008154809291906001019190505561140f565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459061247e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61089d6115e8565b6108a76000611666565b565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61092b6115e8565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd833c7cea3bce2562e201bf7e85016d0bc1173580c719f63378cc5d0457552b68160405161099b9190611dac565b60405180910390a150565b6060600180546109b5906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546109e1906121b9565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b5050505050905090565b610a4a610a43611053565b838361172c565b5050565b60606000604051602001610a61906124ea565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a17092a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b03919061251f565b73ffffffffffffffffffffffffffffffffffffffff1663316df61e826040518263ffffffff1660e01b8152600401610b3b91906125a1565b600060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b819190612664565b915050919050565b610b9a610b94611053565b83611114565b610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612380565b60405180910390fd5b610be584848484611898565b50505050565b60606000604051602001610bfe906126f9565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a17092a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca0919061251f565b73ffffffffffffffffffffffffffffffffffffffff1663316df61e826040518263ffffffff1660e01b8152600401610cd891906125a1565b600060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d1e9190612664565b915050919050565b6060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663725fa09c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dbe9190612664565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e5f6115e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec59061278b565b60405180910390fd5b610ed781611666565b50565b610ee26115e8565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ff157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110015750611000826118f4565b5b9050919050565b6110118161195e565b611050576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611047906123ec565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110ce83610710565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061112083610710565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061116257506111618185610dc3565b5b806111a057508373ffffffffffffffffffffffffffffffffffffffff1661118884610529565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166111c982610710565b73ffffffffffffffffffffffffffffffffffffffff161461121f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112169061281d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361128e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611285906128af565b60405180910390fd5b6112998383836119ca565b6112a460008261105b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f491906128fe565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461134b9190612932565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461140a8383836119cf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361147e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611475906129d4565b60405180910390fd5b6114878161195e565b156114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114be90612a40565b60405180910390fd5b6114d3600083836119ca565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115239190612932565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115e4600083836119cf565b5050565b6115f0611053565b73ffffffffffffffffffffffffffffffffffffffff1661160e6108f9565b73ffffffffffffffffffffffffffffffffffffffff1614611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b90612aac565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361179a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179190612b18565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161188b9190611c32565b60405180910390a3505050565b6118a38484846111a9565b6118af848484846119d4565b6118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e590612baa565b60405180910390fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006119f58473ffffffffffffffffffffffffffffffffffffffff16611b5b565b15611b4e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1e611053565b8786866040518563ffffffff1660e01b8152600401611a409493929190612bca565b6020604051808303816000875af1925050508015611a7c57506040513d601f19601f82011682018060405250810190611a799190612c2b565b60015b611afe573d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b506000815103611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed90612baa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b53565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bc781611b92565b8114611bd257600080fd5b50565b600081359050611be481611bbe565b92915050565b600060208284031215611c0057611bff611b88565b5b6000611c0e84828501611bd5565b91505092915050565b60008115159050919050565b611c2c81611c17565b82525050565b6000602082019050611c476000830184611c23565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c87578082015181840152602081019050611c6c565b83811115611c96576000848401525b50505050565b6000601f19601f8301169050919050565b6000611cb882611c4d565b611cc28185611c58565b9350611cd2818560208601611c69565b611cdb81611c9c565b840191505092915050565b60006020820190508181036000830152611d008184611cad565b905092915050565b6000819050919050565b611d1b81611d08565b8114611d2657600080fd5b50565b600081359050611d3881611d12565b92915050565b600060208284031215611d5457611d53611b88565b5b6000611d6284828501611d29565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d9682611d6b565b9050919050565b611da681611d8b565b82525050565b6000602082019050611dc16000830184611d9d565b92915050565b611dd081611d8b565b8114611ddb57600080fd5b50565b600081359050611ded81611dc7565b92915050565b60008060408385031215611e0a57611e09611b88565b5b6000611e1885828601611dde565b9250506020611e2985828601611d29565b9150509250929050565b611e3c81611d08565b82525050565b6000602082019050611e576000830184611e33565b92915050565b600080600060608486031215611e7657611e75611b88565b5b6000611e8486828701611dde565b9350506020611e9586828701611dde565b9250506040611ea686828701611d29565b9150509250925092565b600060208284031215611ec657611ec5611b88565b5b6000611ed484828501611dde565b91505092915050565b611ee681611c17565b8114611ef157600080fd5b50565b600081359050611f0381611edd565b92915050565b60008060408385031215611f2057611f1f611b88565b5b6000611f2e85828601611dde565b9250506020611f3f85828601611ef4565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f8b82611c9c565b810181811067ffffffffffffffff82111715611faa57611fa9611f53565b5b80604052505050565b6000611fbd611b7e565b9050611fc98282611f82565b919050565b600067ffffffffffffffff821115611fe957611fe8611f53565b5b611ff282611c9c565b9050602081019050919050565b82818337600083830152505050565b600061202161201c84611fce565b611fb3565b90508281526020810184848401111561203d5761203c611f4e565b5b612048848285611fff565b509392505050565b600082601f83011261206557612064611f49565b5b813561207584826020860161200e565b91505092915050565b60006020828403121561209457612093611b88565b5b600082013567ffffffffffffffff8111156120b2576120b1611b8d565b5b6120be84828501612050565b91505092915050565b600080600080608085870312156120e1576120e0611b88565b5b60006120ef87828801611dde565b945050602061210087828801611dde565b935050604061211187828801611d29565b925050606085013567ffffffffffffffff81111561213257612131611b8d565b5b61213e87828801612050565b91505092959194509250565b6000806040838503121561216157612160611b88565b5b600061216f85828601611dde565b925050602061218085828601611dde565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121d157607f821691505b6020821081036121e4576121e361218a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612246602183611c58565b9150612251826121ea565b604082019050919050565b6000602082019050818103600083015261227581612239565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006122d8603e83611c58565b91506122e38261227c565b604082019050919050565b60006020820190508181036000830152612307816122cb565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b600061236a602e83611c58565b91506123758261230e565b604082019050919050565b600060208201905081810360008301526123998161235d565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006123d6601883611c58565b91506123e1826123a0565b602082019050919050565b60006020820190508181036000830152612405816123c9565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612468602983611c58565b91506124738261240c565b604082019050919050565b600060208201905081810360008301526124978161245b565b9050919050565b7f3078303000000000000000000000000000000000000000000000000000000000600082015250565b60006124d4600483611c58565b91506124df8261249e565b602082019050919050565b60006020820190508181036000830152612503816124c7565b9050919050565b60008151905061251981611dc7565b92915050565b60006020828403121561253557612534611b88565b5b60006125438482850161250a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006125738261254c565b61257d8185612557565b935061258d818560208601611c69565b61259681611c9c565b840191505092915050565b600060208201905081810360008301526125bb8184612568565b905092915050565b600067ffffffffffffffff8211156125de576125dd611f53565b5b6125e782611c9c565b9050602081019050919050565b6000612607612602846125c3565b611fb3565b90508281526020810184848401111561262357612622611f4e565b5b61262e848285611c69565b509392505050565b600082601f83011261264b5761264a611f49565b5b815161265b8482602086016125f4565b91505092915050565b60006020828403121561267a57612679611b88565b5b600082015167ffffffffffffffff81111561269857612697611b8d565b5b6126a484828501612636565b91505092915050565b7f6b616d65732e6574680000000000000000000000000000000000000000000000600082015250565b60006126e3600983611c58565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612775602683611c58565b915061278082612719565b604082019050919050565b600060208201905081810360008301526127a481612768565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612807602583611c58565b9150612812826127ab565b604082019050919050565b60006020820190508181036000830152612836816127fa565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612899602483611c58565b91506128a48261283d565b604082019050919050565b600060208201905081810360008301526128c88161288c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290982611d08565b915061291483611d08565b925082821015612927576129266128cf565b5b828203905092915050565b600061293d82611d08565b915061294883611d08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561297d5761297c6128cf565b5b828201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006129be602083611c58565b91506129c982612988565b602082019050919050565b600060208201905081810360008301526129ed816129b1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612a2a601c83611c58565b9150612a35826129f4565b602082019050919050565b60006020820190508181036000830152612a5981612a1d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a96602083611c58565b9150612aa182612a60565b602082019050919050565b60006020820190508181036000830152612ac581612a89565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612b02601983611c58565b9150612b0d82612acc565b602082019050919050565b60006020820190508181036000830152612b3181612af5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b94603283611c58565b9150612b9f82612b38565b604082019050919050565b60006020820190508181036000830152612bc381612b87565b9050919050565b6000608082019050612bdf6000830187611d9d565b612bec6020830186611d9d565b612bf96040830185611e33565b8181036060830152612c0b8184612568565b905095945050505050565b600081519050612c2581611bbe565b92915050565b600060208284031215612c4157612c40611b88565b5b6000612c4f84828501612c16565b9150509291505056fea2646970667358221220dd00b2dcf6dcc4163e14d3be04051473425293332e037bd03b5d5e33a8051a5a64736f6c634300080f0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101585760003560e01c806387a89ee6116100c3578063b88d4fde1161007c578063b88d4fde146103b3578063c87b56dd146103cf578063e8a3d485146103ff578063e985e9c51461041d578063f2fde38b1461044d578063fca3b5aa1461046957610158565b806387a89ee6146102f15780638da5cb5b1461030f5780639137c1a71461032d57806395d89b4114610349578063a22cb46514610367578063b35173501461038357610158565b806342842e0e1161011557806342842e0e146102315780636352211e1461024d5780636a6278421461027d57806370a0823114610299578063715018a6146102c957806383c5b8d3146102d357610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db57806318160ddd146101f757806323b872dd14610215575b600080fd5b61017760048036038101906101729190611bea565b610485565b6040516101849190611c32565b60405180910390f35b610195610497565b6040516101a29190611ce6565b60405180910390f35b6101c560048036038101906101c09190611d3e565b610529565b6040516101d29190611dac565b60405180910390f35b6101f560048036038101906101f09190611df3565b61056f565b005b6101ff610686565b60405161020c9190611e42565b60405180910390f35b61022f600480360381019061022a9190611e5d565b610690565b005b61024b60048036038101906102469190611e5d565b6106f0565b005b61026760048036038101906102629190611d3e565b610710565b6040516102749190611dac565b60405180910390f35b61029760048036038101906102929190611eb0565b6107c1565b005b6102b360048036038101906102ae9190611eb0565b6107de565b6040516102c09190611e42565b60405180910390f35b6102d1610895565b005b6102db6108a9565b6040516102e89190611dac565b60405180910390f35b6102f96108cf565b6040516103069190611dac565b60405180910390f35b6103176108f9565b6040516103249190611dac565b60405180910390f35b61034760048036038101906103429190611eb0565b610923565b005b6103516109a6565b60405161035e9190611ce6565b60405180910390f35b610381600480360381019061037c9190611f09565b610a38565b005b61039d6004803603810190610398919061207e565b610a4e565b6040516103aa9190611ce6565b60405180910390f35b6103cd60048036038101906103c891906120c7565b610b89565b005b6103e960048036038101906103e49190611d3e565b610beb565b6040516103f69190611ce6565b60405180910390f35b610407610d26565b6040516104149190611ce6565b60405180910390f35b6104376004803603810190610432919061214a565b610dc3565b6040516104449190611c32565b60405180910390f35b61046760048036038101906104629190611eb0565b610e57565b005b610483600480360381019061047e9190611eb0565b610eda565b005b600061049082610f26565b9050919050565b6060600080546104a6906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546104d2906121b9565b801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b5050505050905090565b600061053482611008565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061057a82610710565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e19061225c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610609611053565b73ffffffffffffffffffffffffffffffffffffffff161480610638575061063781610632611053565b610dc3565b5b610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e906122ee565b60405180910390fd5b610681838361105b565b505050565b6000600754905090565b6106a161069b611053565b82611114565b6106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612380565b60405180910390fd5b6106eb8383836111a9565b505050565b61070b83838360405180602001604052806000815250610b89565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af906123ec565b60405180910390fd5b80915050919050565b6107db81600760008154809291906001019190505561140f565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459061247e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61089d6115e8565b6108a76000611666565b565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61092b6115e8565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd833c7cea3bce2562e201bf7e85016d0bc1173580c719f63378cc5d0457552b68160405161099b9190611dac565b60405180910390a150565b6060600180546109b5906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546109e1906121b9565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b5050505050905090565b610a4a610a43611053565b838361172c565b5050565b60606000604051602001610a61906124ea565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a17092a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b03919061251f565b73ffffffffffffffffffffffffffffffffffffffff1663316df61e826040518263ffffffff1660e01b8152600401610b3b91906125a1565b600060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b819190612664565b915050919050565b610b9a610b94611053565b83611114565b610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612380565b60405180910390fd5b610be584848484611898565b50505050565b60606000604051602001610bfe906126f9565b6040516020818303038152906040529050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a17092a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca0919061251f565b73ffffffffffffffffffffffffffffffffffffffff1663316df61e826040518263ffffffff1660e01b8152600401610cd891906125a1565b600060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d1e9190612664565b915050919050565b6060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663725fa09c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dbe9190612664565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e5f6115e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec59061278b565b60405180910390fd5b610ed781611666565b50565b610ee26115e8565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ff157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110015750611000826118f4565b5b9050919050565b6110118161195e565b611050576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611047906123ec565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110ce83610710565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061112083610710565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061116257506111618185610dc3565b5b806111a057508373ffffffffffffffffffffffffffffffffffffffff1661118884610529565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166111c982610710565b73ffffffffffffffffffffffffffffffffffffffff161461121f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112169061281d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361128e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611285906128af565b60405180910390fd5b6112998383836119ca565b6112a460008261105b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f491906128fe565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461134b9190612932565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461140a8383836119cf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361147e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611475906129d4565b60405180910390fd5b6114878161195e565b156114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114be90612a40565b60405180910390fd5b6114d3600083836119ca565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115239190612932565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115e4600083836119cf565b5050565b6115f0611053565b73ffffffffffffffffffffffffffffffffffffffff1661160e6108f9565b73ffffffffffffffffffffffffffffffffffffffff1614611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b90612aac565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361179a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179190612b18565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161188b9190611c32565b60405180910390a3505050565b6118a38484846111a9565b6118af848484846119d4565b6118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e590612baa565b60405180910390fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006119f58473ffffffffffffffffffffffffffffffffffffffff16611b5b565b15611b4e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1e611053565b8786866040518563ffffffff1660e01b8152600401611a409493929190612bca565b6020604051808303816000875af1925050508015611a7c57506040513d601f19601f82011682018060405250810190611a799190612c2b565b60015b611afe573d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b506000815103611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed90612baa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b53565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bc781611b92565b8114611bd257600080fd5b50565b600081359050611be481611bbe565b92915050565b600060208284031215611c0057611bff611b88565b5b6000611c0e84828501611bd5565b91505092915050565b60008115159050919050565b611c2c81611c17565b82525050565b6000602082019050611c476000830184611c23565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c87578082015181840152602081019050611c6c565b83811115611c96576000848401525b50505050565b6000601f19601f8301169050919050565b6000611cb882611c4d565b611cc28185611c58565b9350611cd2818560208601611c69565b611cdb81611c9c565b840191505092915050565b60006020820190508181036000830152611d008184611cad565b905092915050565b6000819050919050565b611d1b81611d08565b8114611d2657600080fd5b50565b600081359050611d3881611d12565b92915050565b600060208284031215611d5457611d53611b88565b5b6000611d6284828501611d29565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d9682611d6b565b9050919050565b611da681611d8b565b82525050565b6000602082019050611dc16000830184611d9d565b92915050565b611dd081611d8b565b8114611ddb57600080fd5b50565b600081359050611ded81611dc7565b92915050565b60008060408385031215611e0a57611e09611b88565b5b6000611e1885828601611dde565b9250506020611e2985828601611d29565b9150509250929050565b611e3c81611d08565b82525050565b6000602082019050611e576000830184611e33565b92915050565b600080600060608486031215611e7657611e75611b88565b5b6000611e8486828701611dde565b9350506020611e9586828701611dde565b9250506040611ea686828701611d29565b9150509250925092565b600060208284031215611ec657611ec5611b88565b5b6000611ed484828501611dde565b91505092915050565b611ee681611c17565b8114611ef157600080fd5b50565b600081359050611f0381611edd565b92915050565b60008060408385031215611f2057611f1f611b88565b5b6000611f2e85828601611dde565b9250506020611f3f85828601611ef4565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f8b82611c9c565b810181811067ffffffffffffffff82111715611faa57611fa9611f53565b5b80604052505050565b6000611fbd611b7e565b9050611fc98282611f82565b919050565b600067ffffffffffffffff821115611fe957611fe8611f53565b5b611ff282611c9c565b9050602081019050919050565b82818337600083830152505050565b600061202161201c84611fce565b611fb3565b90508281526020810184848401111561203d5761203c611f4e565b5b612048848285611fff565b509392505050565b600082601f83011261206557612064611f49565b5b813561207584826020860161200e565b91505092915050565b60006020828403121561209457612093611b88565b5b600082013567ffffffffffffffff8111156120b2576120b1611b8d565b5b6120be84828501612050565b91505092915050565b600080600080608085870312156120e1576120e0611b88565b5b60006120ef87828801611dde565b945050602061210087828801611dde565b935050604061211187828801611d29565b925050606085013567ffffffffffffffff81111561213257612131611b8d565b5b61213e87828801612050565b91505092959194509250565b6000806040838503121561216157612160611b88565b5b600061216f85828601611dde565b925050602061218085828601611dde565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121d157607f821691505b6020821081036121e4576121e361218a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612246602183611c58565b9150612251826121ea565b604082019050919050565b6000602082019050818103600083015261227581612239565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006122d8603e83611c58565b91506122e38261227c565b604082019050919050565b60006020820190508181036000830152612307816122cb565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b600061236a602e83611c58565b91506123758261230e565b604082019050919050565b600060208201905081810360008301526123998161235d565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006123d6601883611c58565b91506123e1826123a0565b602082019050919050565b60006020820190508181036000830152612405816123c9565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612468602983611c58565b91506124738261240c565b604082019050919050565b600060208201905081810360008301526124978161245b565b9050919050565b7f3078303000000000000000000000000000000000000000000000000000000000600082015250565b60006124d4600483611c58565b91506124df8261249e565b602082019050919050565b60006020820190508181036000830152612503816124c7565b9050919050565b60008151905061251981611dc7565b92915050565b60006020828403121561253557612534611b88565b5b60006125438482850161250a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006125738261254c565b61257d8185612557565b935061258d818560208601611c69565b61259681611c9c565b840191505092915050565b600060208201905081810360008301526125bb8184612568565b905092915050565b600067ffffffffffffffff8211156125de576125dd611f53565b5b6125e782611c9c565b9050602081019050919050565b6000612607612602846125c3565b611fb3565b90508281526020810184848401111561262357612622611f4e565b5b61262e848285611c69565b509392505050565b600082601f83011261264b5761264a611f49565b5b815161265b8482602086016125f4565b91505092915050565b60006020828403121561267a57612679611b88565b5b600082015167ffffffffffffffff81111561269857612697611b8d565b5b6126a484828501612636565b91505092915050565b7f6b616d65732e6574680000000000000000000000000000000000000000000000600082015250565b60006126e3600983611c58565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612775602683611c58565b915061278082612719565b604082019050919050565b600060208201905081810360008301526127a481612768565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612807602583611c58565b9150612812826127ab565b604082019050919050565b60006020820190508181036000830152612836816127fa565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612899602483611c58565b91506128a48261283d565b604082019050919050565b600060208201905081810360008301526128c88161288c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290982611d08565b915061291483611d08565b925082821015612927576129266128cf565b5b828203905092915050565b600061293d82611d08565b915061294883611d08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561297d5761297c6128cf565b5b828201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006129be602083611c58565b91506129c982612988565b602082019050919050565b600060208201905081810360008301526129ed816129b1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612a2a601c83611c58565b9150612a35826129f4565b602082019050919050565b60006020820190508181036000830152612a5981612a1d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a96602083611c58565b9150612aa182612a60565b602082019050919050565b60006020820190508181036000830152612ac581612a89565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612b02601983611c58565b9150612b0d82612acc565b602082019050919050565b60006020820190508181036000830152612b3181612af5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b94603283611c58565b9150612b9f82612b38565b604082019050919050565b60006020820190508181036000830152612bc381612b87565b9050919050565b6000608082019050612bdf6000830187611d9d565b612bec6020830186611d9d565b612bf96040830185611e33565b8181036060830152612c0b8184612568565b905095945050505050565b600081519050612c2581611bbe565b92915050565b600060208284031215612c4157612c40611b88565b5b6000612c4f84828501612c16565b9150509291505056fea2646970667358221220dd00b2dcf6dcc4163e14d3be04051473425293332e037bd03b5d5e33a8051a5a64736f6c634300080f0033","devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"mint(address)":{"params":{"to":"address - Address to mint to`"}},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{"mint(address)":{"notice":"Mints a new token to the given address"},"tokenURI(uint256)":{"notice":"@dev Counterfactual initializeion of the smart contract balance."}},"version":1},"storageLayout":{"storage":[{"astId":3317,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3319,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3323,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":3327,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":3331,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":3337,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2008,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":8476,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_idCounter","offset":0,"slot":"7","type":"t_uint256"},{"astId":8479,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_erc721Storage","offset":0,"slot":"8","type":"t_address"},{"astId":8609,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"ercTwab","offset":0,"slot":"9","type":"t_address"},{"astId":8611,"contract":"contracts/ImpactCard.sol:ImpactCard","label":"_minter","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}');var m=function(f){var e=f.className,n=(new l.R,function(f,e){switch(f){case"mainnet":if("ImpactCard"===e)return ImpactCard;throw new Error("Unknown contract "+e);case"testnet":case"localhost":if("ImpactCard"===e)return p;throw new Error("Unknown contract "+e)}}("localhost","ImpactCard")),s=(0,d.cI)({defaultValues:{pos1:{value:"0",label:"Wolf"},pos2:{value:"1",label:"Parrot"},pos3:{value:"2",label:"Fox"},pos4:{value:"3",label:"Octo"}}}),i=(s.control,s.register,s.watch),m=s.handleSubmit,y=null!==(y=s.formState)?y:(0,r.Z)(new TypeError("Cannot destructure undefined")),v=(i(),(0,c.do)({addressOrName:(null===n||void 0===n?void 0:n.address)||"",contractInterface:(null===n||void 0===n?void 0:n.abi)||"",functionName:"preview",args:["0x00"]})),h=v.data,g=v.error,I=v.isLoading;console.log(u.O$.from("0x0000000000000000000000000000000000000000"),"bigigie"),console.log(g,I);var w=function(){var f=(0,a.Z)(o().mark((function f(e){return o().wrap((function(f){for(;;)switch(f.prev=f.next){case 0:console.log("writing");case 1:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}(),k=b()(e,"FormMintImpactCard");return(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:k,children:[(0,t.jsx)("div",{className:"text-center z-5 relative col-span-8",children:(0,t.jsx)("img",{className:"rounded-xl shadow-lg mx-auto w-full",src:h})}),(0,t.jsxs)("form",{onSubmit:m(w),className:"z-0 relative col-span-4",children:[(0,t.jsxs)("button",{className:"btn btn-emerald btn-lg mt-3 w-full",children:[(0,t.jsx)("span",{className:"",children:"Mint Impact Card"})," ",(0,t.jsx)("br",{})]}),(0,t.jsx)("img",{src:"/img/color-logo.png",className:"w-20 inline-block mt-4"})]})]})})},y=n(39191),v=n(12987),h=n(4056),g=n(91644),I=function(){return(0,t.jsx)(y.o,{meta:(0,t.jsx)(v.h,{title:"".concat(h.X.title," | ").concat(h.X.description),description:h.X.description}),children:(0,t.jsx)("div",{className:"dark: mx-auto bg-gradient-to-br from-green-100 via-green-100 to-green-200 py-32 text-center text-neutral-500 shadow-sm dark:from-emerald-700 dark:via-emerald-800 dark:to-emerald-900 dark:text-white",children:(0,t.jsx)("div",{className:"container mx-auto max-w-screen-lg",children:(0,t.jsxs)("div",{className:"grid grid-cols-12 ",children:[(0,t.jsx)("div",{className:"col-span-5",children:(0,t.jsx)(m,{className:"flex flex-col"})}),(0,t.jsx)("div",{className:"col-span-7 text-left flex justify-center items-center",children:(0,t.jsxs)("div",{className:"w-100 pl-20",children:[(0,t.jsx)("p",{className:"block text-3",children:"welcome"}),(0,t.jsx)("span",{className:"text-4xl",children:(0,t.jsx)(g.JE,{className:"block text-xl",truncate:!0})}),(0,t.jsxs)("div",{className:"my-12",children:[(0,t.jsxs)("p",{className:"text-3xl",children:["\ud83d\udd12 You have completed"," ",(0,t.jsx)(g.hT,{className:"inline-block"})," transactions."]}),(0,t.jsx)("p",{className:"text-3xl",children:"\ud83c\udf32Which amounts to 1400 trees planted."})]}),(0,t.jsxs)("div",{className:"",children:[(0,t.jsxs)("h3",{className:"font-normal text-2xl font-semibold",children:["How It Works -"," ",(0,t.jsx)("span",{className:"font-bold",children:"Carbon Credits per Block Reward"})]}),(0,t.jsx)("p",{className:"leading-8 text-base",children:"To the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway."})]})]})})]})})})})}},39191:function(f,e,n){"use strict";n.d(e,{o:function(){return p}});var t=n(97458),a=n(15242),r=n(71864),s=n(83849),o=n.n(s),d=n(52983),i=function(f){var e=f.className,n=o()(e,"toggle-theme color-mode cursor-pointer"),a=(0,r.Z)(d.useState("light"),2),s=a[0],i=a[1],b=(0,r.Z)(d.useState(!1),2),c=b[0],l=b[1];(0,d.useEffect)((function(){"dark"===localStorage.theme||!("theme"in localStorage)&&window.matchMedia("(prefers-color-scheme: dark)").matches?(document.documentElement.classList.add("dark"),document.documentElement.classList.remove("light"),i("dark"),l(!0)):(document.documentElement.classList.add("light"),document.documentElement.classList.remove("dark"),i("light"),l(!1))}),[]);return(0,t.jsx)("div",{className:n,children:(0,t.jsxs)("label",{className:n,htmlFor:"checkbox",children:[(0,t.jsx)("input",{type:"checkbox",id:"checkbox",onChange:function(f){document.documentElement.classList.toggle("dark"),i("dark"===s?"light":"dark")},defaultChecked:c}),(0,t.jsx)("div",{className:"slider round"}),"dark"===s?(0,t.jsx)("span",{className:"absolute top-2 right-2",children:"\ud83c\udf15 "}):(0,t.jsx)("span",{className:"absolute top-2 left-2",children:"\ud83c\udf19"})]})})},b=n(4056),c=n(67912),l=n.n(c),u=function(f){var e=f.className,n=f.defaultStyle,a=o()("flex items-center justify-between cursor-pointer "),r=o()(e,"app-logo","font-semibold text-lg hover:opacity-70",{"text-purple-600 hover:text-purple-700":n});return(0,t.jsx)(l(),{passHref:!0,href:"/",children:(0,t.jsxs)("span",{className:a,children:[(0,t.jsx)("img",{src:"/img/glyph.png",alt:"logo",className:"h-5 mr-3"}),(0,t.jsx)("span",{className:"",children:b.X.emoji}),(0,t.jsx)("span",{className:r,children:b.X.title})]})})},p=function(f){return(0,t.jsxs)("div",{className:"w-full bg-white p-0 text-gray-700 antialiased dark:bg-gray-700 dark:text-white",children:[f.meta,(0,t.jsxs)("div",{className:"min-h-vh mx-auto h-10 w-full",children:[(0,t.jsxs)("div",{className:"flex items-center justify-between border-b border-gray-300 px-8 py-4 dark:border-neutral-500 dark:bg-gray-700 dark:text-white",children:[(0,t.jsx)("div",{className:" align-center flex items-center justify-between",children:(0,t.jsx)(u,{})}),(0,t.jsxs)("div",{className:"text-right flex items-center",children:[(0,t.jsx)("div",{className:"mr-10",children:(0,t.jsx)(l(),{href:"/how-it-works",children:(0,t.jsx)("span",{className:"text-lg cursor-pointer",children:"How It Works"})})}),(0,t.jsx)(a.NL,{accountStatus:{smallScreen:"avatar",largeScreen:"full"}})]})]}),(0,t.jsx)("div",{className:"content bg-neutral-100 dark:bg-neutral-800",children:f.children}),(0,t.jsx)("footer",{className:"border-t border-gray-300 bg-white py-8 text-sm dark:border-neutral-500 dark:bg-gray-800 dark:text-white px-10",children:(0,t.jsxs)("div",{className:"grid grid-cols-12 gap-4 text-center",children:[(0,t.jsxs)("div",{className:"col-span-12",children:["\xa9 Copyright ",(new Date).getFullYear()," ",b.X.title]}),(0,t.jsx)("div",{className:"col-span-12 text-center",children:(0,t.jsx)(i,{className:""})})]})})]})]})}},12987:function(f,e,n){"use strict";n.d(e,{h:function(){return i}});var t=n(97458),a=n(1746),r=n.n(a),s=n(67653),o=n(92427),d=n(4056),i=function(f){var e=(0,s.useRouter)();return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r(),{children:[(0,t.jsx)("meta",{charSet:"UTF-8"},"charset"),(0,t.jsx)("meta",{name:"viewport",content:"width=device-width,initial-scale=1"},"viewport"),(0,t.jsx)("link",{rel:"apple-touch-icon",href:"".concat(e.basePath,"/apple-touch-icon.png")},"apple"),(0,t.jsx)("link",{rel:"icon",type:"image/png",sizes:"32x32",href:"".concat(e.basePath,"/favicon-32x32.png")},"icon32"),(0,t.jsx)("link",{rel:"icon",type:"image/png",sizes:"16x16",href:"".concat(e.basePath,"/favicon-16x16.png")},"icon16"),(0,t.jsx)("link",{rel:"icon",href:"".concat(e.basePath,"/favicon.ico")},"favicon")]}),(0,t.jsx)(o.PB,{title:f.title,description:f.description,canonical:f.canonical,openGraph:{title:f.title,description:f.description,url:f.canonical,locale:d.X.locale,site_name:d.X.site_name}})]})}}},function(f){f.O(0,[38,523,774,888,179],(function(){return e=15503,f(f.s=e);var e}));var e=f.O();_N_E=e}]);