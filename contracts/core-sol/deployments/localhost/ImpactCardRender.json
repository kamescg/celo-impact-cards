{
  "address": "0x10e38eE9dd4C549b61400Fc19347D00eD3edAfC4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgLibrary_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_svgRegistry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1aeac5ac7f191089f2dfa0b6cde1b230c23f85ee496981d16cb1ce9334694ccb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x10e38eE9dd4C549b61400Fc19347D00eD3edAfC4",
    "transactionIndex": 0,
    "gasUsed": "4884285",
    "logsBloom": "0x
    "blockHash": "0xcc9239335d605d3fd47debc9058242178bdd5259a93f3efb2ae9d84edcf3eeb6",
    "transactionHash": "0x1aeac5ac7f191089f2dfa0b6cde1b230c23f85ee496981d16cb1ce9334694ccb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15606007,
        "transactionHash": "0x1aeac5ac7f191089f2dfa0b6cde1b230c23f85ee496981d16cb1ce9334694ccb",
        "address": "0x10e38eE9dd4C549b61400Fc19347D00eD3edAfC4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcc9239335d605d3fd47debc9058242178bdd5259a93f3efb2ae9d84edcf3eeb6"
      }
    ],
    "blockNumber": 15606007,
    "cumulativeGasUsed": "4884285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBEe6FFc1E8627F51CcDF0b4399a1e1abc5165f15",
    "0xC32609C91d6B6b51D48f2611308FEf121B02041f"
  ],
  "numDeployments": 1,
  "solcInputHash": "a3538823bd4bd6628d72aff10f46e6d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgLibrary_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_svgRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImpactCardRender.sol\":\"ImpactCardRender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc721k/periphery-sol/contracts/interfaces/ISVGModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISVGModule {\\n  function render(bytes memory input) external view returns (string memory);\\n\\n  function getEncoding() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3352c15d00c6db8c108858e4839252c81b7d17da394778ab572c055146b43e27\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0x2e33aeee09dbb045bc969ba9b9bc119394b12f0c1d9014172fea986df942af9c\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { svg } from \\\"./svg.sol\\\";\\nimport { svgUtils } from \\\"./svgUtils.sol\\\";\\nimport { SVGColor } from \\\"./SVGColor.sol\\\";\\n\\ncontract SVGLibrary {\\n  address private _colors;\\n\\n  bytes32 private immutable BUILD = keccak256(\\\"BUILD\\\");\\n  bytes32 private immutable COLOR = keccak256(\\\"COLOR\\\");\\n  bytes32 private immutable UTILS = keccak256(\\\"UTILS\\\");\\n\\n  mapping(bytes32 => address) _modules;\\n\\n  constructor(address _colors_) {\\n    _colors = _colors_;\\n  }\\n\\n  function execute(bytes32 package, bytes calldata input)\\n    external\\n    view\\n    returns (string memory data)\\n  {\\n    if (_modules[package] != 0x0000000000000000000000000000000000000000) {\\n      (bool success, bytes memory data) = address(_modules[package]).staticcall(input);\\n      return string(data);\\n    } else if (package == BUILD) {\\n      (bool success, bytes memory data) = address(svg).staticcall(input);\\n      return string(data);\\n    } else if (package == COLOR) {\\n      (bool success, bytes memory data) = _colors.staticcall(input);\\n      return string(data);\\n    } else if (package == UTILS) {\\n      (bool success, bytes memory data) = address(svgUtils).staticcall(input);\\n      return string(data);\\n    } else {\\n      return string(data);\\n      revert(\\\"SVGLibrary:invalid-operation\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8250249bdb8e9c4eb9056f8a77eada2db6380ce880bb2cacfb7c426a983e0bd7\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/SVGRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISVGModule } from \\\"../interfaces/ISVGModule.sol\\\";\\n\\ncontract SVGRegistry is Ownable {\\n  mapping(bytes32 => address) private _modules;\\n\\n  constructor() {}\\n\\n  function fetch(bytes32 widgetId, bytes memory input) external view returns (string memory) {\\n    if (_modules[widgetId] != address(0)) {\\n      return ISVGModule(_modules[widgetId]).render(input);\\n    } else {\\n      return \\\"\\\";\\n    }\\n  }\\n\\n  function getWidget(bytes32 widgetId) external view returns (address widget) {\\n    return _modules[widgetId];\\n  }\\n\\n  function setWidget(bytes32 widgetId, address widget) external onlyOwner {\\n    _modules[widgetId] = widget;\\n  }\\n}\\n\",\"keccak256\":\"0xf4629edfc6c4e170f033ec96dcc854a5a9be4508e9949c1ff86888a1ef96e379\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/svg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./svgUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start() internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"320\\\" height=\\\"320\\\" style=\\\"background:#FFF\\\" ',\\n        'viewBox=\\\"0 0 320 320\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0x3d1cb93b81523967c549cee2570755d07651b44d2a36e50ab0f7e237447a1587\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/svgUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n/**\\n  * @title  SVG Utilities\\n  * @author Kames Geraghty\\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n*/\\nlibrary svgUtils {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    \\n    /// @notice Empty SVG element\\n    string internal constant NULL = \\\"\\\";\\n\\n    /**\\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n     * @param _key User for which to calculate prize amount.\\n     * @param _val User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    /**\\n     * @notice Formats getting a css variable\\n     * @param _key User for which to calculate prize amount.\\n     * @return string Generated CSS variable.\\n    */\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n     // converts an unsigned integer to a string\\n     function uint2str(uint256 _i)\\n     internal\\n     pure\\n     returns (string memory _uintAsString)\\n {\\n     if (_i == 0) {\\n         return \\\"0\\\";\\n     }\\n     uint256 j = _i;\\n     uint256 len;\\n     while (j != 0) {\\n         len++;\\n         j /= 10;\\n     }\\n     bytes memory bstr = new bytes(len);\\n     uint256 k = len;\\n     while (_i != 0) {\\n         k = k - 1;\\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n         bytes1 b1 = bytes1(temp);\\n         bstr[k] = b1;\\n         _i /= 10;\\n     }\\n     return string(bstr);\\n }\\n}\\n\",\"keccak256\":\"0xe8ac1b5676a5d9850445e97799a09a1a30026f03728cb2286eeba23bc57b06e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ImpactCardRender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { strings } from \\\"./libraries/strings.sol\\\";\\nimport { svg } from \\\"./svg/svg.sol\\\";\\nimport { svgUtils } from \\\"./svg/svgUtils.sol\\\";\\nimport { SVGLibrary } from \\\"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\\\";\\nimport { SVGRegistry } from \\\"@erc721k/periphery-sol/contracts/svg/SVGRegistry.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\n\\ncontract ImpactCardRender is Ownable {\\n  address internal _svgLibrary;\\n  address internal _svgRegistry;\\n\\n  string private constant ENCODING = \\\"data:image/svg+xml;base64, \\\";\\n\\n  mapping(uint8 => bytes) private colorFill;\\n\\n  constructor(address _svgLibrary_, address _svgRegistry_) {\\n    _svgLibrary = _svgLibrary_;\\n    _svgRegistry = _svgRegistry_;\\n    colorFill[0] = hex\\\"35D07F\\\"; // Green\\n    colorFill[1] = hex\\\"FBCC5C\\\"; // Yellow\\n    colorFill[2] = hex\\\"BF97FF\\\"; // Purple\\n    colorFill[3] = hex\\\"FB7C6D\\\"; // Red\\n    colorFill[4] = hex\\\"000000\\\"; // Black\\n    colorFill[5] = hex\\\"3488EC\\\"; // Blue\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(_render(input)))));\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n  function encodeSvgToDataURI(string memory data) internal view returns (string memory) {\\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(data))));\\n  }\\n\\n  function _render(bytes memory input) internal view returns (string memory) {\\n    (\\n      uint256 balance,\\n      uint8 cardStyle,\\n      bool gitcoinGrantFlag,\\n      bool impactMarketFlag,\\n      bool ethicHubFlag,\\n      string memory emoji\\n    ) = abi.decode(input, (uint256, uint8, bool, bool, bool, string));\\n    bytes memory _colorFill = colorFill[cardStyle];\\n\\n    uint256 questCount = 0;\\n\\n    if (gitcoinGrantFlag) {\\n      questCount++;\\n    }\\n    if (impactMarketFlag) {\\n      questCount++;\\n    }\\n    if (ethicHubFlag) {\\n      questCount++;\\n    }\\n\\n    return\\n      string.concat(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"500\\\" height=\\\"300\\\" viewBox=\\\"0 0 500 300\\\" fill=\\\"none\\\" style=\\\"font-family: EB Garamond;\\\" >',\\n        // '<g opacity=\\\"0.92\\\" filter=\\\"url(#filter0_ii_86_67)\\\"><path d=\\\"M0 18C0 8.05887 8.05887 0 18 0H1018C1027.94 0 1036 8.05887 1036 18V570C1036 579.941 1027.94 588 1018 588H18C8.05887 588 0 579.941 0 570V18Z\\\" fill=\\\"#D9D9D9\\\" fill-opacity=\\\"0.01\\\"/></g>',\\n        '<svg x=\\\"1%\\\" y=\\\"0.25%\\\" width=\\\"98%\\\" height=\\\"99.5%\\\" viewBox=\\\"0 0 1036 588\\\" fill=\\\"none\\\"> <g opacity=\\\"0.92\\\" filter=\\\"url(#filter0_ii_86_67)\\\"> <path d=\\\"M0 18C0 8.05887 8.05887 0 18 0H1018C1027.94 0 1036 8.05887 1036 18V570C1036 579.941 1027.94 588 1018 588H18C8.05887 588 0 579.941 0 570V18Z\\\" fill=\\\"#D9D9D9\\\" fill-opacity=\\\"0.01\\\"/> </g> <defs> <filter id=\\\"filter0_ii_86_67\\\" x=\\\"-2.93008\\\" y=\\\"-2.93008\\\" width=\\\"1043.33\\\" height=\\\"596.79\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"> <feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/> <feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"shape\\\"/> <feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/> <feOffset dx=\\\"4.39512\\\" dy=\\\"5.86016\\\"/> <feGaussianBlur stdDeviation=\\\"2.93008\\\"/> <feComposite in2=\\\"hardAlpha\\\" operator=\\\"arithmetic\\\" k2=\\\"-1\\\" k3=\\\"1\\\"/> <feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\\\"/> <feBlend mode=\\\"normal\\\" in2=\\\"shape\\\" result=\\\"effect1_innerShadow_86_67\\\"/> <feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/> <feOffset dx=\\\"-2.93008\\\" dy=\\\"-2.93008\\\"/> <feGaussianBlur stdDeviation=\\\"5.86016\\\"/> <feComposite in2=\\\"hardAlpha\\\" operator=\\\"arithmetic\\\" k2=\\\"-1\\\" k3=\\\"1\\\"/> <feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.18 0\\\"/> <feBlend mode=\\\"normal\\\" in2=\\\"effect1_innerShadow_86_67\\\" result=\\\"effect2_innerShadow_86_67\\\"/> </filter> </defs> </svg>',\\n        svg.rect(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"0\\\"),\\n            svg.prop(\\\"width\\\", \\\"500\\\"),\\n            svg.prop(\\\"height\\\", \\\"500\\\"),\\n            // svg.prop(\\\"transform\\\", \\\"translaterotate(90 526.995 20.9999)(\\\"),\\n            svg.prop(\\\"fill\\\", string(svgUtils.getRgba(_colorFill)))\\n          )\\n        ),\\n        renderHeader(emoji),\\n        renderPartnerOne(impactMarketFlag),\\n        renderPartnerTwo(ethicHubFlag),\\n        renderPartnerThree(gitcoinGrantFlag),\\n        renderFooter(balance, questCount),\\n        '<defs><style>.cls-1{fill:#FFF;}.text-shadow-md {text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.12);}</style><linearGradient id=\\\"myGradient\\\" gradientTransform=\\\"rotate(90)\\\"> <stop offset=\\\"5%\\\" stop-color=\\\"gold\\\" /> <stop offset=\\\"95%\\\" stop-color=\\\"red\\\" /> </linearGradient></defs>',\\n        \\\"</svg>\\\"\\n      );\\n  }\\n\\n  function _lib(bytes32 _key, bytes memory _value) internal view returns (string memory) {\\n    return SVGLibrary(_svgLibrary).execute(_key, _value);\\n  }\\n\\n  function _registry(bytes32 _key, bytes memory _value) internal view returns (string memory) {\\n    return SVGRegistry(_svgRegistry).fetch(_key, _value);\\n  }\\n\\n  function renderHeader(string memory emoji) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"class\\\", \\\"text-shadow-md\\\"),\\n            svg.prop(\\\"x\\\", \\\"5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"15%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"26\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"EB Garamond\\\"),\\n            svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          \\\"Impact Card\\\"\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"class\\\", \\\"text-shadow-md\\\"),\\n            svg.prop(\\\"x\\\", \\\"82%\\\"),\\n            svg.prop(\\\"y\\\", \\\"15%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"16\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"EB Garamond\\\"),\\n            svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          \\\"Built on Celo\\\"\\n        ),\\n        svg.circle(\\n          string.concat(\\n            svg.prop(\\\"cx\\\", \\\"89.5%\\\"),\\n            svg.prop(\\\"cy\\\", \\\"15%\\\"),\\n            svg.prop(\\\"r\\\", \\\"25\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\"),\\n            svg.prop(\\\"stroke\\\", string(svgUtils.getRgba(colorFill[1]))),\\n            svg.prop(\\\"stroke-width\\\", \\\"4\\\")\\n          )\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"91.65%\\\"),\\n            svg.prop(\\\"y\\\", \\\"16.5%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"22\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"EB Garamond\\\"),\\n            svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          emoji\\n        )\\n      );\\n  }\\n\\n  function renderFooter(uint256 balance, uint256 questCount) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        // '<svg x=\\\"5%\\\" y=\\\"78%\\\" width=\\\"27\\\" height=\\\"37\\\" viewBox=\\\"0 0 41 37\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M15.8015 32.674C22.2013 32.674 27.3892 27.3996 27.3892 20.8931C27.3892 14.3866 22.2013 9.1122 15.8015 9.1122C9.40167 9.1122 4.21373 14.3866 4.21373 20.8931C4.21373 27.3996 9.40167 32.674 15.8015 32.674ZM15.8015 36.9579C7.07485 36.9579 0 29.7652 0 20.8931C0 12.021 7.07485 4.82825 15.8015 4.82825C24.5281 4.82825 31.603 12.021 31.603 20.8931C31.603 29.7652 24.5281 36.9579 15.8015 36.9579Z\\\" fill=\\\"#FFF\\\"/> <path d=\\\"M24.229 27.8457C30.6288 27.8457 35.8167 22.5713 35.8167 16.0648C35.8167 9.55836 30.6288 4.28396 24.229 4.28396C17.8292 4.28396 12.6412 9.55836 12.6412 16.0648C12.6412 22.5713 17.8292 27.8457 24.229 27.8457ZM24.229 32.1297C15.5023 32.1297 8.42749 24.9369 8.42749 16.0648C8.42749 7.19276 15.5023 0 24.229 0C32.9556 0 40.0304 7.19276 40.0304 16.0648C40.0304 24.9369 32.9556 32.1297 24.229 32.1297Z\\\" fill=\\\"#FFF\\\"/> </svg>',\\n        '<svg id=\\\"Layer_1\\\" x=\\\"5%\\\" y=\\\"80%\\\" width=\\\"25\\\" height=\\\"25\\\" viewBox=\\\"0 0 100 100\\\" style=\\\"enable-background:new 0 0 100 100;\\\" xml:space=\\\"preserve\\\"> <style type=\\\"text/css\\\"> .st0{fill:#FBCC5C;} .st1{fill:#FFFFFF;} </style> <desc>Symbol for the Celo Gold currency</desc> <path class=\\\"st0\\\" d=\\\"M50,0L50,0c27.6,0,50,22.4,50,50v0c0,27.6-22.4,50-50,50h0C22.4,100,0,77.6,0,50v0C0,22.4,22.4,0,50,0z\\\"/> <g> <path class=\\\"st1\\\" d=\\\"M78.6,44c0-12.4-10.1-22.5-22.5-22.5c-9.4,0-17.4,5.7-20.8,13.9c-8,3.4-13.7,11.4-13.7,20.7 c0,12.4,10.1,22.5,22.5,22.5c9.4,0,17.4-5.7,20.8-13.9C72.8,61.3,78.6,53.3,78.6,44z M44.1,73c-9.3,0-16.9-7.6-16.9-16.9 c0-5.3,2.5-10.1,6.4-13.2c0,0.4,0,0.8,0,1.1c0,12.4,10.1,22.5,22.5,22.5c0.5,0,0.9,0,1.4,0C54.3,70.5,49.5,73,44.1,73z M60.5,60.3 c-1.4,0.4-2.9,0.6-4.4,0.6c-9.3,0-16.9-7.6-16.9-16.9c0-1.5,0.2-2.9,0.6-4.2c1.4-0.4,2.9-0.6,4.4-0.6c9.3,0,16.9,7.6,16.9,16.9 C61,57.6,60.8,59,60.5,60.3z M66.6,57.2c0-0.4,0-0.8,0-1.1c0-12.4-10.1-22.5-22.5-22.5c-0.5,0-0.9,0-1.4,0c3.1-4,7.9-6.5,13.3-6.5 c9.3,0,16.9,7.6,16.9,16.9C72.9,49.4,70.4,54.1,66.6,57.2z\\\"/> </g> </svg>',\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"class\\\", \\\"text-shadow-md\\\"),\\n            svg.prop(\\\"x\\\", \\\"11.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"85%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"28\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"EB Garamond\\\"),\\n            svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string(svgUtils.round2Txt(balance, 18, 3))\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"class\\\", \\\"text-shadow-md\\\"),\\n            svg.prop(\\\"x\\\", \\\"95%\\\"),\\n            svg.prop(\\\"y\\\", \\\"85%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"24\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"EB Garamond\\\"),\\n            svg.prop(\\\"dominant-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string.concat(\\n            svgUtils.uint2str(questCount),\\n            \\\"/3 \\\"\\n            //  unicode\\\"\\ud83c\\udf0e\\\"\\n          )\\n        )\\n        // svg.rect(\\n        //   string.concat(\\n        //     svg.prop(\\\"x\\\", \\\"86.35%\\\"),\\n        //     svg.prop(\\\"y\\\", \\\"90%\\\"),\\n        //     svg.prop(\\\"width\\\", \\\"42.5px\\\"),\\n        //     svg.prop(\\\"height\\\", \\\"3px\\\"),\\n        //     svg.prop(\\\"fill\\\", \\\"white\\\"),\\n        //     svg.prop(\\\"fill-opacity\\\", \\\"0.75\\\")\\n        //   )\\n        // )\\n      );\\n  }\\n\\n  function renderPartnerOne(bool status) internal view returns (string memory) {\\n    string memory opacity_ = status ? \\\"1\\\" : \\\"0.5\\\";\\n\\n    string memory inner = string.concat(\\n      '<svg width=\\\"100\\\" height=\\\"60\\\" viewBox=\\\"0 0 392 367\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"25\\\" y=\\\"20\\\"> <path d=\\\"M246.581 101.13C268.05 116.814 281.838 142.023 281.838 170.459C281.838 217.828 243.437 256.229 196.068 256.229C148.699 256.229 110.298 217.828 110.298 170.459C110.298 142.023 124.086 116.814 145.555 101.13C167.474 85.1171 172.261 54.3682 156.249 32.4499C140.236 10.5316 109.487 5.74394 87.569 21.7564C41.8557 55.1523 12 109.322 12 170.459C12 272.117 94.41 354.527 196.068 354.527C297.726 354.527 380.136 272.117 380.136 170.459C380.136 109.322 350.28 55.1523 304.567 21.7564C282.648 5.74394 251.899 10.5316 235.887 32.4499\\\" stroke=\\\"white\\\" stroke-width=\\\"23.2758\\\" stroke-linecap=\\\"round\\\"/> <path d=\\\"M141.781 104.05C122.519 119.82 110.296 143.702 110.296 170.46C110.296 217.829 148.697 256.23 196.066 256.23C243.436 256.23 281.836 217.829 281.836 170.46C281.836 143.702 269.613 119.82 250.351 104.05C239.643 95.2844 238.069 79.4979 246.836 68.7903C255.602 58.0827 271.388 56.5088 282.096 65.2749C312.485 90.1537 331.949 128.044 331.949 170.46C331.949 245.506 271.112 306.342 196.066 306.342C121.02 306.342 60.1836 245.506 60.1836 170.46C60.1836 128.044 79.6476 90.1537 110.036 65.2749\\\" stroke=\\\"white\\\" stroke-width=\\\"23.2758\\\" stroke-linecap=\\\"round\\\"/> </svg>',\\n      svg.rect(string.concat(svg.prop(\\\"width\\\", \\\"150\\\"), svg.prop(\\\"height\\\", \\\"120\\\")), \\\"\\\"),\\n      svg.text(\\n        string.concat(\\n          svg.prop(\\\"x\\\", \\\"75\\\"),\\n          svg.prop(\\\"y\\\", \\\"105\\\"),\\n          svg.prop(\\\"font-size\\\", \\\"18\\\"),\\n          svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n          svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n          svg.prop(\\\"fill\\\", \\\"white\\\")\\n        ),\\n        \\\"impactMarket\\\"\\n      )\\n    );\\n\\n    return\\n      string.concat(\\n        svg.g(\\n          string.concat(svg.prop(\\\"transform\\\", \\\"translate(25,90)\\\"), svg.prop(\\\"opacity\\\", opacity_)),\\n          inner\\n        )\\n      );\\n  }\\n\\n  function renderPartnerTwo(bool status) internal view returns (string memory) {\\n    string memory opacity_ = status ? \\\"1\\\" : \\\"0.5\\\";\\n    string memory inner = string.concat(\\n      '<svg width=\\\"230\\\" height=\\\"140\\\" viewBox=\\\"0 0 1224 792\\\" fill=\\\"#FFF\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"25\\\" y=\\\"-20\\\"><path class=\\\"cls-1\\\" d=\\\"M229.84,379.43h0l-89.48-51.66a29.89,29.89,0,0,0-2.59,11.77V444.86a30,30,0,0,0,14.38,25.19l92.59,53.46a30.07,30.07,0,0,0,10.46,3V491.72a30,30,0,0,1-12.36-4l-.14-.07-64-36.94v0c-3.26-2.13-5.84-6.33-5.84-9.66s2.58-4.56,5.84-2.92h0l.21.13.26.13.27.16,49.16,28.39,16.07,9.28a29.87,29.87,0,0,0,10.51,3.06V444.42a29.6,29.6,0,0,1-11.82-3.77h0l-.24-.14-.3-.16-.09-.06-63.49-36.65c-.05,0-.11-.06-.17-.1l-.17-.1-.19-.11v0c-2.9-1.86-5.21-5.6-5.21-8.55s2.31-4,5.21-2.55v0l.34.21h0l0,0,64.84,37.43a29.74,29.74,0,0,0,11.26,3.47V394.07Zm53.09-18.93-105.4-60.85-25,14.43a30.05,30.05,0,0,0-9,8.21L258.19,388.5l34-19.64a30.22,30.22,0,0,0-9.29-8.36m-9.8,69.05.52-.29L298,415.2V386.92c0-.11,0-.22,0-.34a30,30,0,0,0-2.58-12.17l-34.05,19.66v39.24a30.06,30.06,0,0,0,11.76-3.76m105.61-89.71a30,30,0,0,0-2.53-12.07L339.47,349a29.82,29.82,0,0,1,2.33,8.65l.2.39v2.41c0,.23,0,.44,0,.67s0,.59,0,.89v38.94l-68.85,39.75-.14,0a29.92,29.92,0,0,1-11.64,3.7v34.77A29.75,29.75,0,0,0,273,475.51l69-39.85V483l21.74-12.56a.85.85,0,0,1,.19-.14,30.06,30.06,0,0,0,14.81-25.91,7.27,7.27,0,0,1,.08-1.07V340.82a6.17,6.17,0,0,1-.08-1M273,488.12l-.29.14a29.77,29.77,0,0,1-11.32,3.44v34.84a29.67,29.67,0,0,0,11.51-3.64L298,508.39V473.66Zm92.73-173-91.58-52.87a9.34,9.34,0,0,1-.95-.47,30.11,30.11,0,0,0-30.76.54,9.08,9.08,0,0,1-1.36.68l-10.34,6-9.09,5.25L326.91,335l.15.16a30.18,30.18,0,0,1,9.21,8.32L373,322.2a30.06,30.06,0,0,0-7.29-7.12\\\"/></svg>',\\n      svg.rect(string.concat(svg.prop(\\\"width\\\", \\\"150\\\"), svg.prop(\\\"height\\\", \\\"120\\\")), \\\"\\\"),\\n      svg.text(\\n        string.concat(\\n          svg.prop(\\\"x\\\", \\\"75\\\"),\\n          svg.prop(\\\"y\\\", \\\"105\\\"),\\n          svg.prop(\\\"font-size\\\", \\\"18\\\"),\\n          svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n          svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n          svg.prop(\\\"fill\\\", \\\"white\\\")\\n        ),\\n        \\\"EthicHub\\\"\\n      )\\n    );\\n\\n    return\\n      string.concat(\\n        svg.g(\\n          string.concat(svg.prop(\\\"transform\\\", \\\"translate(175,90)\\\"), svg.prop(\\\"opacity\\\", opacity_)),\\n          inner\\n        )\\n      );\\n  }\\n\\n  function renderPartnerThree(bool status) internal view returns (string memory) {\\n    string memory opacity_ = status ? \\\"1\\\" : \\\"0.5\\\";\\n    string memory inner = string.concat(\\n      '<svg width=\\\"50\\\" height=\\\"104\\\" viewBox=\\\"0 0 117 144\\\" fill=\\\"none\\\" x=\\\"50\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M111.041 78.8701C111.041 89.1183 107.625 98.5124 101.647 106.483L99.3697 104.775L92.5376 99.6511C97.0923 93.673 99.6544 86.2715 99.6544 78.8701C99.6544 71.4686 97.377 64.3518 92.8223 58.6584L96.8077 54.9577L101.362 50.9723C107.625 58.6584 111.041 68.3372 111.041 78.8701V78.8701Z\\\" fill=\\\"white\\\"/> <path d=\\\"M99.3698 104.775L92.5377 99.651L79.4428 89.9722C82.0049 86.5561 83.7129 82.5707 83.7129 78.016C83.7129 74.8846 82.8589 71.7532 81.4355 69.1911L93.1071 58.3736L97.0925 54.6729L101.647 50.6875L113.034 40.1547L116.735 36.4539L112.465 32.1839C100.793 20.5123 85.4209 13.6802 68.91 13.1109V4.57073C68.91 2.00869 66.9173 0.0159912 64.3553 0.0159912C61.7932 0.0159912 59.8005 2.00869 59.8005 4.57073V13.3955C56.0998 13.6802 52.3991 14.5342 48.6983 15.3882V4.57073C48.6983 2.00869 46.7056 0.300661 44.1436 0.300661C41.5815 0.300661 39.5888 2.29336 39.5888 4.57073V18.8043C16.8151 29.0525 0.873535 51.8262 0.873535 78.3006C0.873535 113.315 28.7713 142.067 63.5012 143.49H115.027V115.877L101.647 106.483L99.3698 104.775V104.775ZM71.7567 78.3006C71.7567 82.5707 68.3407 85.9868 64.0706 85.9868C59.8005 85.9868 56.3845 82.5707 56.3845 78.3006C56.3845 74.0306 59.8005 70.6145 64.0706 70.6145C68.3407 70.6145 71.7567 74.0306 71.7567 78.3006ZM102.786 132.104H66.0633V131.819C36.4575 131.819 12.2604 107.906 12.2604 78.3006C12.2604 58.3736 23.0779 41.0087 39.3042 31.8992V50.9722C39.3042 53.2495 41.2969 55.2422 43.8589 55.2422C46.421 55.2422 48.4137 53.2495 48.4137 50.9722V27.6291C51.8297 26.4904 55.5304 25.6364 59.5158 25.0671C61.5085 24.7824 63.7859 24.7824 66.0633 24.7824H68.6253C80.0122 25.3517 90.545 29.3371 99.3698 36.4539L72.8954 60.9357C70.3334 59.5123 67.202 58.943 64.0706 58.943C53.5377 58.943 44.7129 67.4831 44.7129 78.3006C44.7129 88.8335 53.2531 97.6583 64.0706 97.6583C65.7786 97.6583 67.202 97.3736 68.91 97.0889L74.8881 101.359L103.071 121.855V132.104H102.786Z\\\" fill=\\\"white\\\"/> </svg> ',\\n      svg.rect(string.concat(svg.prop(\\\"width\\\", \\\"150\\\"), svg.prop(\\\"height\\\", \\\"120\\\")), \\\"\\\"),\\n      svg.text(\\n        string.concat(\\n          svg.prop(\\\"x\\\", \\\"75\\\"),\\n          svg.prop(\\\"y\\\", \\\"105\\\"),\\n          svg.prop(\\\"font-size\\\", \\\"18\\\"),\\n          svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n          svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n          svg.prop(\\\"fill\\\", \\\"white\\\")\\n        ),\\n        \\\"Gitcoin Grants\\\"\\n      )\\n    );\\n\\n    return\\n      string.concat(\\n        svg.g(\\n          string.concat(svg.prop(\\\"transform\\\", \\\"translate(325,90)\\\"), svg.prop(\\\"opacity\\\", opacity_)),\\n          inner\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xa24902b64cc2f2406d8d1dc5af403bb66b0427114e178e6483f895dbfe5732ae\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xe41fde66b1af92a5e131493ac16af2e4799e447dd8808608a4da024e340a826a\",\"license\":\"Unlicense\"},\"contracts/libraries/strings.sol\":{\"content\":\"/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary strings {\\n  struct slice {\\n    uint256 _len;\\n    uint256 _ptr;\\n  }\\n\\n  function memcpy(\\n    uint256 dest,\\n    uint256 src,\\n    uint256 len\\n  ) private pure {\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = type(uint256).max;\\n    if (len > 0) {\\n      mask = 256**(32 - len) - 1;\\n    }\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a slice containing the entire string.\\n   * @param self The string to make a slice from.\\n   * @return A newly allocated slice containing the entire string.\\n   */\\n  function toSlice(string memory self) internal pure returns (slice memory) {\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(self, 0x20)\\n    }\\n    return slice(bytes(self).length, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns the length of a null-terminated bytes32 string.\\n   * @param self The value to find the length of.\\n   * @return The length of the string, from 0 to 32.\\n   */\\n  function len(bytes32 self) internal pure returns (uint256) {\\n    uint256 ret;\\n    if (self == 0) return 0;\\n    if (uint256(self) & type(uint128).max == 0) {\\n      ret += 16;\\n      self = bytes32(uint256(self) / 0x100000000000000000000000000000000);\\n    }\\n    if (uint256(self) & type(uint64).max == 0) {\\n      ret += 8;\\n      self = bytes32(uint256(self) / 0x10000000000000000);\\n    }\\n    if (uint256(self) & type(uint32).max == 0) {\\n      ret += 4;\\n      self = bytes32(uint256(self) / 0x100000000);\\n    }\\n    if (uint256(self) & type(uint16).max == 0) {\\n      ret += 2;\\n      self = bytes32(uint256(self) / 0x10000);\\n    }\\n    if (uint256(self) & type(uint8).max == 0) {\\n      ret += 1;\\n    }\\n    return 32 - ret;\\n  }\\n\\n  /*\\n   * @dev Returns a slice containing the entire bytes32, interpreted as a\\n   *      null-terminated utf-8 string.\\n   * @param self The bytes32 value to convert to a slice.\\n   * @return A new slice containing the value of the input argument up to the\\n   *         first null.\\n   */\\n  function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n    // Allocate space for `self` in memory, copy it there, and point ret at it\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(0x40, add(ptr, 0x20))\\n      mstore(ptr, self)\\n      mstore(add(ret, 0x20), ptr)\\n    }\\n    ret._len = len(self);\\n  }\\n\\n  /*\\n   * @dev Returns a new slice containing the same data as the current slice.\\n   * @param self The slice to copy.\\n   * @return A new slice containing the same data as `self`.\\n   */\\n  function copy(slice memory self) internal pure returns (slice memory) {\\n    return slice(self._len, self._ptr);\\n  }\\n\\n  /*\\n   * @dev Copies a slice to a new string.\\n   * @param self The slice to copy.\\n   * @return A newly allocated string containing the slice's text.\\n   */\\n  function toString(slice memory self) internal pure returns (string memory) {\\n    string memory ret = new string(self._len);\\n    uint256 retptr;\\n    assembly {\\n      retptr := add(ret, 32)\\n    }\\n\\n    memcpy(retptr, self._ptr, self._len);\\n    return ret;\\n  }\\n\\n  /*\\n   * @dev Returns the length in runes of the slice. Note that this operation\\n   *      takes time proportional to the length of the slice; avoid using it\\n   *      in loops, and call `slice.empty()` if you only need to know whether\\n   *      the slice is empty or not.\\n   * @param self The slice to operate on.\\n   * @return The length of the slice in runes.\\n   */\\n  function len(slice memory self) internal pure returns (uint256 l) {\\n    // Starting at ptr-31 means the LSB will be the byte we care about\\n    uint256 ptr = self._ptr - 31;\\n    uint256 end = ptr + self._len;\\n    for (l = 0; ptr < end; l++) {\\n      uint8 b;\\n      assembly {\\n        b := and(mload(ptr), 0xFF)\\n      }\\n      if (b < 0x80) {\\n        ptr += 1;\\n      } else if (b < 0xE0) {\\n        ptr += 2;\\n      } else if (b < 0xF0) {\\n        ptr += 3;\\n      } else if (b < 0xF8) {\\n        ptr += 4;\\n      } else if (b < 0xFC) {\\n        ptr += 5;\\n      } else {\\n        ptr += 6;\\n      }\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns true if the slice is empty (has a length of 0).\\n   * @param self The slice to operate on.\\n   * @return True if the slice is empty, False otherwise.\\n   */\\n  function empty(slice memory self) internal pure returns (bool) {\\n    return self._len == 0;\\n  }\\n\\n  /*\\n   * @dev Returns a positive number if `other` comes lexicographically after\\n   *      `self`, a negative number if it comes before, or zero if the\\n   *      contents of the two slices are equal. Comparison is done per-rune,\\n   *      on unicode codepoints.\\n   * @param self The first slice to compare.\\n   * @param other The second slice to compare.\\n   * @return The result of the comparison.\\n   */\\n  function compare(slice memory self, slice memory other) internal pure returns (int256) {\\n    uint256 shortest = self._len;\\n    if (other._len < self._len) shortest = other._len;\\n\\n    uint256 selfptr = self._ptr;\\n    uint256 otherptr = other._ptr;\\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\\n      uint256 a;\\n      uint256 b;\\n      assembly {\\n        a := mload(selfptr)\\n        b := mload(otherptr)\\n      }\\n      if (a != b) {\\n        // Mask out irrelevant bytes and check again\\n        uint256 mask = type(uint256).max; // 0xffff...\\n        if (shortest < 32) {\\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n        }\\n        unchecked {\\n          uint256 diff = (a & mask) - (b & mask);\\n          if (diff != 0) return int256(diff);\\n        }\\n      }\\n      selfptr += 32;\\n      otherptr += 32;\\n    }\\n    return int256(self._len) - int256(other._len);\\n  }\\n\\n  /*\\n   * @dev Returns true if the two slices contain the same text.\\n   * @param self The first slice to compare.\\n   * @param self The second slice to compare.\\n   * @return True if the slices are equal, false otherwise.\\n   */\\n  function equals(slice memory self, slice memory other) internal pure returns (bool) {\\n    return compare(self, other) == 0;\\n  }\\n\\n  /*\\n   * @dev Extracts the first rune in the slice into `rune`, advancing the\\n   *      slice to point to the next rune and returning `self`.\\n   * @param self The slice to operate on.\\n   * @param rune The slice that will contain the first rune.\\n   * @return `rune`.\\n   */\\n  function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\n    rune._ptr = self._ptr;\\n\\n    if (self._len == 0) {\\n      rune._len = 0;\\n      return rune;\\n    }\\n\\n    uint256 l;\\n    uint256 b;\\n    // Load the first byte of the rune into the LSBs of b\\n    assembly {\\n      b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)\\n    }\\n    if (b < 0x80) {\\n      l = 1;\\n    } else if (b < 0xE0) {\\n      l = 2;\\n    } else if (b < 0xF0) {\\n      l = 3;\\n    } else {\\n      l = 4;\\n    }\\n\\n    // Check for truncated codepoints\\n    if (l > self._len) {\\n      rune._len = self._len;\\n      self._ptr += self._len;\\n      self._len = 0;\\n      return rune;\\n    }\\n\\n    self._ptr += l;\\n    self._len -= l;\\n    rune._len = l;\\n    return rune;\\n  }\\n\\n  /*\\n   * @dev Returns the first rune in the slice, advancing the slice to point\\n   *      to the next rune.\\n   * @param self The slice to operate on.\\n   * @return A slice containing only the first rune from `self`.\\n   */\\n  function nextRune(slice memory self) internal pure returns (slice memory ret) {\\n    nextRune(self, ret);\\n  }\\n\\n  /*\\n   * @dev Returns the number of the first codepoint in the slice.\\n   * @param self The slice to operate on.\\n   * @return The number of the first codepoint in the slice.\\n   */\\n  function ord(slice memory self) internal pure returns (uint256 ret) {\\n    if (self._len == 0) {\\n      return 0;\\n    }\\n\\n    uint256 word;\\n    uint256 length;\\n    uint256 divisor = 2**248;\\n\\n    // Load the rune into the MSBs of b\\n    assembly {\\n      word := mload(mload(add(self, 32)))\\n    }\\n    uint256 b = word / divisor;\\n    if (b < 0x80) {\\n      ret = b;\\n      length = 1;\\n    } else if (b < 0xE0) {\\n      ret = b & 0x1F;\\n      length = 2;\\n    } else if (b < 0xF0) {\\n      ret = b & 0x0F;\\n      length = 3;\\n    } else {\\n      ret = b & 0x07;\\n      length = 4;\\n    }\\n\\n    // Check for truncated codepoints\\n    if (length > self._len) {\\n      return 0;\\n    }\\n\\n    for (uint256 i = 1; i < length; i++) {\\n      divisor = divisor / 256;\\n      b = (word / divisor) & 0xFF;\\n      if (b & 0xC0 != 0x80) {\\n        // Invalid UTF-8 sequence\\n        return 0;\\n      }\\n      ret = (ret * 64) | (b & 0x3F);\\n    }\\n\\n    return ret;\\n  }\\n\\n  /*\\n   * @dev Returns the keccak-256 hash of the slice.\\n   * @param self The slice to hash.\\n   * @return The hash of the slice.\\n   */\\n  function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n    assembly {\\n      ret := keccak256(mload(add(self, 32)), mload(self))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns true if `self` starts with `needle`.\\n   * @param self The slice to operate on.\\n   * @param needle The slice to search for.\\n   * @return True if the slice starts with the provided text, false otherwise.\\n   */\\n  function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n    if (self._len < needle._len) {\\n      return false;\\n    }\\n\\n    if (self._ptr == needle._ptr) {\\n      return true;\\n    }\\n\\n    bool equal;\\n    assembly {\\n      let length := mload(needle)\\n      let selfptr := mload(add(self, 0x20))\\n      let needleptr := mload(add(needle, 0x20))\\n      equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n    }\\n    return equal;\\n  }\\n\\n  /*\\n   * @dev If `self` starts with `needle`, `needle` is removed from the\\n   *      beginning of `self`. Otherwise, `self` is unmodified.\\n   * @param self The slice to operate on.\\n   * @param needle The slice to search for.\\n   * @return `self`\\n   */\\n  function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n    if (self._len < needle._len) {\\n      return self;\\n    }\\n\\n    bool equal = true;\\n    if (self._ptr != needle._ptr) {\\n      assembly {\\n        let length := mload(needle)\\n        let selfptr := mload(add(self, 0x20))\\n        let needleptr := mload(add(needle, 0x20))\\n        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n      }\\n    }\\n\\n    if (equal) {\\n      self._len -= needle._len;\\n      self._ptr += needle._len;\\n    }\\n\\n    return self;\\n  }\\n\\n  /*\\n   * @dev Returns true if the slice ends with `needle`.\\n   * @param self The slice to operate on.\\n   * @param needle The slice to search for.\\n   * @return True if the slice starts with the provided text, false otherwise.\\n   */\\n  function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n    if (self._len < needle._len) {\\n      return false;\\n    }\\n\\n    uint256 selfptr = self._ptr + self._len - needle._len;\\n\\n    if (selfptr == needle._ptr) {\\n      return true;\\n    }\\n\\n    bool equal;\\n    assembly {\\n      let length := mload(needle)\\n      let needleptr := mload(add(needle, 0x20))\\n      equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n    }\\n\\n    return equal;\\n  }\\n\\n  /*\\n   * @dev If `self` ends with `needle`, `needle` is removed from the\\n   *      end of `self`. Otherwise, `self` is unmodified.\\n   * @param self The slice to operate on.\\n   * @param needle The slice to search for.\\n   * @return `self`\\n   */\\n  function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n    if (self._len < needle._len) {\\n      return self;\\n    }\\n\\n    uint256 selfptr = self._ptr + self._len - needle._len;\\n    bool equal = true;\\n    if (selfptr != needle._ptr) {\\n      assembly {\\n        let length := mload(needle)\\n        let needleptr := mload(add(needle, 0x20))\\n        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n      }\\n    }\\n\\n    if (equal) {\\n      self._len -= needle._len;\\n    }\\n\\n    return self;\\n  }\\n\\n  // Returns the memory address of the first byte of the first occurrence of\\n  // `needle` in `self`, or the first byte after `self` if not found.\\n  function findPtr(\\n    uint256 selflen,\\n    uint256 selfptr,\\n    uint256 needlelen,\\n    uint256 needleptr\\n  ) private pure returns (uint256) {\\n    uint256 ptr = selfptr;\\n    uint256 idx;\\n\\n    if (needlelen <= selflen) {\\n      if (needlelen <= 32) {\\n        bytes32 mask;\\n        if (needlelen > 0) {\\n          mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\\n        }\\n\\n        bytes32 needledata;\\n        assembly {\\n          needledata := and(mload(needleptr), mask)\\n        }\\n\\n        uint256 end = selfptr + selflen - needlelen;\\n        bytes32 ptrdata;\\n        assembly {\\n          ptrdata := and(mload(ptr), mask)\\n        }\\n\\n        while (ptrdata != needledata) {\\n          if (ptr >= end) return selfptr + selflen;\\n          ptr++;\\n          assembly {\\n            ptrdata := and(mload(ptr), mask)\\n          }\\n        }\\n        return ptr;\\n      } else {\\n        // For long needles, use hashing\\n        bytes32 hash;\\n        assembly {\\n          hash := keccak256(needleptr, needlelen)\\n        }\\n\\n        for (idx = 0; idx <= selflen - needlelen; idx++) {\\n          bytes32 testHash;\\n          assembly {\\n            testHash := keccak256(ptr, needlelen)\\n          }\\n          if (hash == testHash) return ptr;\\n          ptr += 1;\\n        }\\n      }\\n    }\\n    return selfptr + selflen;\\n  }\\n\\n  // Returns the memory address of the first byte after the last occurrence of\\n  // `needle` in `self`, or the address of `self` if not found.\\n  function rfindPtr(\\n    uint256 selflen,\\n    uint256 selfptr,\\n    uint256 needlelen,\\n    uint256 needleptr\\n  ) private pure returns (uint256) {\\n    uint256 ptr;\\n\\n    if (needlelen <= selflen) {\\n      if (needlelen <= 32) {\\n        bytes32 mask;\\n        if (needlelen > 0) {\\n          mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\\n        }\\n\\n        bytes32 needledata;\\n        assembly {\\n          needledata := and(mload(needleptr), mask)\\n        }\\n\\n        ptr = selfptr + selflen - needlelen;\\n        bytes32 ptrdata;\\n        assembly {\\n          ptrdata := and(mload(ptr), mask)\\n        }\\n\\n        while (ptrdata != needledata) {\\n          if (ptr <= selfptr) return selfptr;\\n          ptr--;\\n          assembly {\\n            ptrdata := and(mload(ptr), mask)\\n          }\\n        }\\n        return ptr + needlelen;\\n      } else {\\n        // For long needles, use hashing\\n        bytes32 hash;\\n        assembly {\\n          hash := keccak256(needleptr, needlelen)\\n        }\\n        ptr = selfptr + (selflen - needlelen);\\n        while (ptr >= selfptr) {\\n          bytes32 testHash;\\n          assembly {\\n            testHash := keccak256(ptr, needlelen)\\n          }\\n          if (hash == testHash) return ptr + needlelen;\\n          ptr -= 1;\\n        }\\n      }\\n    }\\n    return selfptr;\\n  }\\n\\n  /*\\n   * @dev Modifies `self` to contain everything from the first occurrence of\\n   *      `needle` to the end of the slice. `self` is set to the empty slice\\n   *      if `needle` is not found.\\n   * @param self The slice to search and modify.\\n   * @param needle The text to search for.\\n   * @return `self`.\\n   */\\n  function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n    self._len -= ptr - self._ptr;\\n    self._ptr = ptr;\\n    return self;\\n  }\\n\\n  /*\\n   * @dev Modifies `self` to contain the part of the string from the start of\\n   *      `self` to the end of the first occurrence of `needle`. If `needle`\\n   *      is not found, `self` is set to the empty slice.\\n   * @param self The slice to search and modify.\\n   * @param needle The text to search for.\\n   * @return `self`.\\n   */\\n  function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n    uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n    self._len = ptr - self._ptr;\\n    return self;\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything after the first\\n   *      occurrence of `needle`, and `token` to everything before it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and `token` is set to the entirety of `self`.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @param token An output parameter to which the first token is written.\\n   * @return `token`.\\n   */\\n  function split(\\n    slice memory self,\\n    slice memory needle,\\n    slice memory token\\n  ) internal pure returns (slice memory) {\\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n    token._ptr = self._ptr;\\n    token._len = ptr - self._ptr;\\n    if (ptr == self._ptr + self._len) {\\n      // Not found\\n      self._len = 0;\\n    } else {\\n      self._len -= token._len + needle._len;\\n      self._ptr = ptr + needle._len;\\n    }\\n    return token;\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything after the first\\n   *      occurrence of `needle`, and returning everything before it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and the entirety of `self` is returned.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @return The part of `self` up to the first occurrence of `delim`.\\n   */\\n  function split(slice memory self, slice memory needle)\\n    internal\\n    pure\\n    returns (slice memory token)\\n  {\\n    split(self, needle, token);\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything before the last\\n   *      occurrence of `needle`, and `token` to everything after it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and `token` is set to the entirety of `self`.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @param token An output parameter to which the first token is written.\\n   * @return `token`.\\n   */\\n  function rsplit(\\n    slice memory self,\\n    slice memory needle,\\n    slice memory token\\n  ) internal pure returns (slice memory) {\\n    uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n    token._ptr = ptr;\\n    token._len = self._len - (ptr - self._ptr);\\n    if (ptr == self._ptr) {\\n      // Not found\\n      self._len = 0;\\n    } else {\\n      self._len -= token._len + needle._len;\\n    }\\n    return token;\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything before the last\\n   *      occurrence of `needle`, and returning everything after it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and the entirety of `self` is returned.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @return The part of `self` after the last occurrence of `delim`.\\n   */\\n  function rsplit(slice memory self, slice memory needle)\\n    internal\\n    pure\\n    returns (slice memory token)\\n  {\\n    rsplit(self, needle, token);\\n  }\\n\\n  /*\\n   * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n   * @param self The slice to search.\\n   * @param needle The text to search for in `self`.\\n   * @return The number of occurrences of `needle` found in `self`.\\n   */\\n  function count(slice memory self, slice memory needle) internal pure returns (uint256 cnt) {\\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\n    while (ptr <= self._ptr + self._len) {\\n      cnt++;\\n      ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns True if `self` contains `needle`.\\n   * @param self The slice to search.\\n   * @param needle The text to search for in `self`.\\n   * @return True if `needle` is found in `self`, false otherwise.\\n   */\\n  function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\n    return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\n  }\\n\\n  /*\\n   * @dev Returns a newly allocated string containing the concatenation of\\n   *      `self` and `other`.\\n   * @param self The first slice to concatenate.\\n   * @param other The second slice to concatenate.\\n   * @return The concatenation of the two strings.\\n   */\\n  function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n    string memory ret = new string(self._len + other._len);\\n    uint256 retptr;\\n    assembly {\\n      retptr := add(ret, 32)\\n    }\\n    memcpy(retptr, self._ptr, self._len);\\n    memcpy(retptr + self._len, other._ptr, other._len);\\n    return ret;\\n  }\\n\\n  /*\\n   * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n   *      newly allocated string.\\n   * @param self The delimiter to use.\\n   * @param parts A list of slices to join.\\n   * @return A newly allocated string containing all the slices in `parts`,\\n   *         joined with `self`.\\n   */\\n  function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\n    if (parts.length == 0) return \\\"\\\";\\n\\n    uint256 length = self._len * (parts.length - 1);\\n    for (uint256 i = 0; i < parts.length; i++) length += parts[i]._len;\\n\\n    string memory ret = new string(length);\\n    uint256 retptr;\\n    assembly {\\n      retptr := add(ret, 32)\\n    }\\n\\n    for (uint256 i = 0; i < parts.length; i++) {\\n      memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n      retptr += parts[i]._len;\\n      if (i < parts.length - 1) {\\n        memcpy(retptr, self._ptr, self._len);\\n        retptr += self._len;\\n      }\\n    }\\n\\n    return ret;\\n  }\\n}\\n\",\"keccak256\":\"0x83487f7094b9a2f51b1fb6d2a9f420a093e1d0911894fac96eb45d813f8c732f\"},\"contracts/svg/svg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./svgUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start(string memory width, string memory height) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"',\\n        width,\\n        '\\\" ',\\n        'height=\\\"',\\n        height,\\n        '\\\" ',\\n        'style=\\\"background:#FFF\\\" ',\\n        'viewBox=\\\"0 0 320 190\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xf248b6fd7a54ff2e16271532cbcb6b1674249f3c8262c88186f679744eaabe1a\",\"license\":\"MIT\"},\"contracts/svg/svgUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { BytesLib } from \\\"../libraries/BytesLib.sol\\\";\\n\\n/**\\n * @title  SVG Utilities\\n * @author Kames Geraghty\\n * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svgUtils {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  /// @notice Empty SVG element\\n  string internal constant NULL = \\\"\\\";\\n\\n  /**\\n   * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n   * @param _key User for which to calculate prize amount.\\n   * @param _val User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function setCssVar(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n  }\\n\\n  /**\\n   * @notice Formats getting a css variable\\n   * @param _key User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function getCssVar(string memory _key) internal pure returns (string memory) {\\n    return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n  }\\n\\n  // formats getting a def URL\\n  function getDefURL(string memory _id) internal pure returns (string memory) {\\n    return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n  }\\n\\n  // checks if two strings are equal\\n  function stringsEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n    return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n  }\\n\\n  // returns the length of a string in characters\\n  function utfStringLength(string memory _str) internal pure returns (uint256 length) {\\n    uint256 i = 0;\\n    bytes memory string_rep = bytes(_str);\\n\\n    while (i < string_rep.length) {\\n      if (string_rep[i] >> 7 == 0) i += 1;\\n      else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n      else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n      else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n        i += 4;\\n        //For safety\\n      else i += 1;\\n\\n      length++;\\n    }\\n  }\\n\\n  function round2Txt(\\n    uint256 _value,\\n    uint8 _decimals,\\n    uint8 _prec\\n  ) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        (_value / 10**_decimals).toString(),\\n        \\\".\\\",\\n        (_value / 10**(_decimals - _prec) - (_value / 10**(_decimals)) * 10**_prec).toString()\\n      );\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function splitAddress(address account) internal pure returns (string memory) {\\n    // bytes memory b = abi.encodePacked(account);\\n    bytes memory start = BytesLib.slice(abi.encodePacked(account), 0, 3);\\n    // 0x761d584f1C2d43cBc3F42ECd739701a36dFFAa31\\n    return string.concat(\\\"0x\\\", string(abi.encodePacked(\\\"761d\\\")), \\\"...\\\", \\\"Aa31\\\");\\n  }\\n\\n  function toString(address account) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(account));\\n  }\\n\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes32 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes memory data) internal pure returns (string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < data.length; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function getColor(bytes memory _colorHex) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, hex\\\"64\\\");\\n  }\\n\\n  function getColor(bytes memory _colorHex, uint8 _alpha) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, _alpha);\\n  }\\n\\n  function getRgba(bytes memory _colorHex) internal view returns (string memory) {\\n    return string(toRgba(getColor(_colorHex), 0));\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) internal pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0x9f5bb6d64a2c0752e5a9040f8ce2b032e581dd3adbd594f47e2138a7b91aa8b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2538,
        "contract": "contracts/ImpactCardRender.sol:ImpactCardRender",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5173,
        "contract": "contracts/ImpactCardRender.sol:ImpactCardRender",
        "label": "_svgLibrary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5175,
        "contract": "contracts/ImpactCardRender.sol:ImpactCardRender",
        "label": "_svgRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5182,
        "contract": "contracts/ImpactCardRender.sol:ImpactCardRender",
        "label": "colorFill",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint8,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}