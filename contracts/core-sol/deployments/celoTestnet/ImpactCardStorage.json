{
  "address": "0x029327EB51310C7AA5E8d999B637F690cFc9a581",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgRender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traitsFetch_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "_contractURI_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "SvgRenderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "TraitsFetchUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "constructContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "input0",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "input1",
          "type": "bytes"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractDescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSvgRender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitsFetch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "setSvgRender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "setTraitsFetch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd443647fb1e08270a55186ae00ebc01baf0681d81817442de975bd6ae7dd2aa8",
  "receipt": {
    "to": null,
    "from": "0xA3EFD916aa60feF4941667316B0C1D2BaB53237d",
    "contractAddress": "0x029327EB51310C7AA5E8d999B637F690cFc9a581",
    "transactionIndex": 5,
    "gasUsed": "2384524",
    "logsBloom": "0x
    "blockHash": "0x02f9ed567e4f4501dbd3dca9e916b2d683381f897f56f850759f313d978b18a4",
    "transactionHash": "0xd443647fb1e08270a55186ae00ebc01baf0681d81817442de975bd6ae7dd2aa8",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 13888467,
        "transactionHash": "0xd443647fb1e08270a55186ae00ebc01baf0681d81817442de975bd6ae7dd2aa8",
        "address": "0x029327EB51310C7AA5E8d999B637F690cFc9a581",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3efd916aa60fef4941667316b0c1d2bab53237d"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x02f9ed567e4f4501dbd3dca9e916b2d683381f897f56f850759f313d978b18a4"
      }
    ],
    "blockNumber": 13888467,
    "cumulativeGasUsed": "2556638",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xec6652CA9697611689e98987c5509B36C199b772",
    "0xf765bE4443c69EF2B00CcB55436e3ce08842f861",
    {
      "name": "ImpactCard",
      "description": "ImpactCards - Powered by PoolTogether.",
      "image": "",
      "externalLink": "https://chance.card",
      "sellerFeeBasisPoints": "0",
      "feeRecipient": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9bf1cd3416db986484f5d39bc8c32ea7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgRender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traitsFetch_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"_contractURI_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"SvgRenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"TraitsFetchUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"input1\",\"type\":\"bytes\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractDescription\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSvgRender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitsFetch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"setSvgRender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"setTraitsFetch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ImpactCardStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImpactCardStorage.sol\":\"ImpactCardStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc721k/core-sol/contracts/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC721KImage } from \\\"./interfaces/IERC721KImage.sol\\\";\\nimport { IERC721KTraits } from \\\"./interfaces/IERC721KTraits.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721Storage\\n * @author Kames Geraghty\\n */\\nabstract contract ERC721Storage is Ownable {\\n  address internal _svgRender;\\n  address internal _traitsFetch;\\n  ContractURI internal _contractURI;\\n\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n  }\\n\\n  event SvgRenderUpdated(address svgRender);\\n\\n  event TraitsFetchUpdated(address traitsFetch);\\n\\n  event ContractURIUpdated(ContractURI contractURI);\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) {\\n    _svgRender = _svgRender_;\\n    _traitsFetch = _traitsFetch_;\\n    _contractURI = _contractURI_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Virtual Functions                                                                     */\\n  /* ===================================================================================== */\\n\\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n  function getSvgRender() external view returns (address) {\\n    return _svgRender;\\n  }\\n\\n  function getTraitsFetch() external view returns (address) {\\n    return _traitsFetch;\\n  }\\n\\n  function getContractDescription() external view returns (ContractURI memory) {\\n    return _contractURI;\\n  }\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    return IERC721KImage(_svgRender).render(input);\\n  }\\n\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view returns (string memory uri) {\\n    string memory image_ = IERC721KImage(_svgRender).render(input0);\\n    string memory traits_ = IERC721KTraits(_traitsFetch).fetch(input1);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                traits_,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function constructContractURI() external view returns (string memory uri) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _contractURI.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _contractURI.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _contractURI.image,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                _contractURI.externalLink,\\n                '\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                _contractURI.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                _contractURI.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function setSvgRender(address svgRender) external onlyOwner {\\n    _svgRender = svgRender;\\n    emit SvgRenderUpdated(svgRender);\\n  }\\n\\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\\n    _traitsFetch = traitsFetch;\\n    emit TraitsFetchUpdated(traitsFetch);\\n  }\\n\\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\\n    _contractURI = contractURI;\\n    emit ContractURIUpdated(contractURI);\\n  }\\n}\\n\",\"keccak256\":\"0x8ed49f50f2314ec51dea0e1bd41ac4d962366e48edce4771dc16ebf27f976405\",\"license\":\"GPL-3.0\"},\"@erc721k/core-sol/contracts/interfaces/IERC721KImage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IERC721KImage {\\n  function render(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8474249915bfc50221f4431b8853338ae27e8847ac3ef563dda437dd809a8846\",\"license\":\"MIT\"},\"@erc721k/core-sol/contracts/interfaces/IERC721KTraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IERC721KTraits {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0e4ebc534cc1453dd57592eec64a3dc44377a30b98b6f33c780354a126481b5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ImpactCardStorage.sol\":{\"content\":\"pragma solidity 0.8.15;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ERC721Storage } from \\\"@erc721k/core-sol/contracts/ERC721Storage.sol\\\";\\n\\n/**\\n * @title ImpactCardStorage\\n * @author Kames Geraghty\\n */\\ncontract ImpactCardStorage is ERC721Storage {\\n  mapping(uint256 => string) _name;\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) ERC721Storage(_svgRender_, _traitsFetch_, _contractURI_) {}\\n\\n  function _parseName(uint256 _tokenId) internal view override returns (string memory) {\\n    return string.concat(\\\"Example #\\\", Strings.toString(_tokenId));\\n  }\\n\\n  function _parseDescription(uint256 _tokenId) internal view override returns (string memory) {\\n    return string.concat(\\\"Member #\\\", Strings.toString(_tokenId), \\\" of Example.\\\");\\n  }\\n\\n  function getData(uint256 _tokenId) internal view returns (string memory) {\\n    return _name[_tokenId];\\n  }\\n}\\n\",\"keccak256\":\"0xf9f336bd598d828b18049981af0b29a4a929c19e780350d386fcfea2c2874230\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e5138038062002e518339818101604052810190620000379190620005c1565b8282826200005a6200004e6200017e60201b60201c565b6200018660201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060036000820151816000019081620000f6919062000887565b5060208201518160010190816200010e919062000887565b50604082015181600201908162000126919062000887565b5060608201518160030190816200013e919062000887565b50608082015181600401908162000156919062000887565b5060a08201518160050190816200016e919062000887565b509050505050505050506200096e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028b826200025e565b9050919050565b6200029d816200027e565b8114620002a957600080fd5b50565b600081519050620002bd8162000292565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031382620002c8565b810181811067ffffffffffffffff82111715620003355762000334620002d9565b5b80604052505050565b60006200034a6200024a565b905062000358828262000308565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156200038a5762000389620002d9565b5b6200039582620002c8565b9050602081019050919050565b60005b83811015620003c2578082015181840152602081019050620003a5565b83811115620003d2576000848401525b50505050565b6000620003ef620003e9846200036c565b6200033e565b9050828152602081018484840111156200040e576200040d62000367565b5b6200041b848285620003a2565b509392505050565b600082601f8301126200043b576200043a62000362565b5b81516200044d848260208601620003d8565b91505092915050565b600060c082840312156200046f576200046e620002c3565b5b6200047b60c06200033e565b9050600082015167ffffffffffffffff8111156200049e576200049d6200035d565b5b620004ac8482850162000423565b600083015250602082015167ffffffffffffffff811115620004d357620004d26200035d565b5b620004e18482850162000423565b602083015250604082015167ffffffffffffffff8111156200050857620005076200035d565b5b620005168482850162000423565b604083015250606082015167ffffffffffffffff8111156200053d576200053c6200035d565b5b6200054b8482850162000423565b606083015250608082015167ffffffffffffffff8111156200057257620005716200035d565b5b620005808482850162000423565b60808301525060a082015167ffffffffffffffff811115620005a757620005a66200035d565b5b620005b58482850162000423565b60a08301525092915050565b600080600060608486031215620005dd57620005dc62000254565b5b6000620005ed86828701620002ac565b93505060206200060086828701620002ac565b925050604084015167ffffffffffffffff81111562000624576200062362000259565b5b620006328682870162000456565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068f57607f821691505b602082108103620006a557620006a462000647565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200070f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006d0565b6200071b8683620006d0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000768620007626200075c8462000733565b6200073d565b62000733565b9050919050565b6000819050919050565b620007848362000747565b6200079c62000793826200076f565b848454620006dd565b825550505050565b600090565b620007b3620007a4565b620007c081848462000779565b505050565b5b81811015620007e857620007dc600082620007a9565b600181019050620007c6565b5050565b601f82111562000837576200080181620006ab565b6200080c84620006c0565b810160208510156200081c578190505b620008346200082b85620006c0565b830182620007c5565b50505b505050565b600082821c905092915050565b60006200085c600019846008026200083c565b1980831691505092915050565b600062000877838362000849565b9150826002028217905092915050565b62000892826200063c565b67ffffffffffffffff811115620008ae57620008ad620002d9565b5b620008ba825462000676565b620008c7828285620007ec565b600060209050601f831160018114620008ff5760008415620008ea578287015190505b620008f6858262000869565b86555062000966565b601f1984166200090f86620006ab565b60005b82811015620009395784890151825560018201915060208501945060208101905062000912565b8683101562000959578489015162000955601f89168262000849565b8355505b6001600288020188555050505b505050505050565b6124d3806200097e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639a17092a116100715780639a17092a14610167578063a3f22a2014610185578063ae70ed13146101a3578063d12bcb12146101bf578063f0679616146101dd578063f2fde38b1461020d576100b4565b8063316df61e146100b95780633ee6fa92146100e957806357e30f4414610105578063715018a614610121578063725fa09c1461012b5780638da5cb5b14610149575b600080fd5b6100d360048036038101906100ce9190611176565b610229565b6040516100e09190611247565b60405180910390f35b61010360048036038101906100fe91906112c7565b6102d3565b005b61011f600480360381019061011a91906114e7565b610356565b005b610129610422565b005b610133610436565b6040516101409190611247565b60405180910390f35b6101516104a5565b60405161015e919061153f565b60405180910390f35b61016f6104ce565b60405161017c919061153f565b60405180910390f35b61018d6104f8565b60405161019a919061153f565b60405180910390f35b6101bd60048036038101906101b891906112c7565b610522565b005b6101c76105a5565b6040516101d49190611650565b60405180910390f35b6101f760048036038101906101f291906116a8565b61092b565b6040516102049190611247565b60405180910390f35b610227600480360381019061022291906112c7565b610adf565b005b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663316df61e836040518263ffffffff1660e01b81526004016102869190611788565b600060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102cc919061181a565b9050919050565b6102db610b62565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f10c0817f42b2182992d55b707430b153f12e59d7e54a975bfec790497dd7f63f8160405161034b919061153f565b60405180910390a150565b61035e610b62565b80600360008201518160000190816103769190611a6f565b50602082015181600101908161038c9190611a6f565b5060408201518160020190816103a29190611a6f565b5060608201518160030190816103b89190611a6f565b5060808201518160040190816103ce9190611a6f565b5060a08201518160050190816103e49190611a6f565b509050507f03a10335d532669eac03b3b7e4ce44aff7f8cb14b7aa397c653fdcb40ae06bec816040516104179190611650565b60405180910390a150565b61042a610b62565b6104346000610be0565b565b6060610481600360000160036001016003600201600380016003600401600360050160405160200161046d96959493929190611d25565b604051602081830303815290604052610ca4565b6040516020016104919190611f17565b604051602081830303815290604052905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61052a610b62565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3c2715cb5e4b39dd4af38ac12bb292a030fb6a063dbd5467ed49da665bcaa9738160405161059a919061153f565b60405180910390a150565b6105ad610fe6565b60036040518060c00160405290816000820180546105ca90611892565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690611892565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b5050505050815260200160018201805461065c90611892565b80601f016020809104026020016040519081016040528092919081815260200182805461068890611892565b80156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b505050505081526020016002820180546106ee90611892565b80601f016020809104026020016040519081016040528092919081815260200182805461071a90611892565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b5050505050815260200160038201805461078090611892565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac90611892565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b5050505050815260200160048201805461081290611892565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90611892565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b505050505081526020016005820180546108a490611892565b80601f01602080910402602001604051908101604052809291908181526020018280546108d090611892565b801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b505050505081525050905090565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663316df61e856040518263ffffffff1660e01b815260040161098a9190611788565b600060405180830381865afa1580156109a7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d0919061181a565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6559a6b856040518263ffffffff1660e01b8152600401610a2f9190611788565b600060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a75919061181a565b9050610ab5610a8387610e1c565b610a8c88610e4d565b8484604051602001610aa19493929190611f85565b604051602081830303815290604052610ca4565b604051602001610ac59190611f17565b604051602081830303815290604052925050509392505050565b610ae7610b62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d906120e9565b60405180910390fd5b610b5f81610be0565b50565b610b6a610e7e565b73ffffffffffffffffffffffffffffffffffffffff16610b886104a5565b73ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590612155565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606000825103610cc657604051806020016040528060008152509050610e17565b600060405180606001604052806040815260200161245e6040913990506000600360028551610cf591906121a4565b610cff9190612229565b6004610d0b919061225a565b90506000602082610d1c91906121a4565b67ffffffffffffffff811115610d3557610d3461104b565b5b6040519080825280601f01601f191660200182016040528015610d675781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610dd6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610d7b565b600389510660018114610df05760028114610e0057610e0b565b613d3d60f01b6002830352610e0b565b603d60f81b60018303525b50505050508093505050505b919050565b6060610e2782610e86565b604051602001610e3791906122da565b6040516020818303038152906040529050919050565b6060610e5882610e86565b604051602001610e68919061234c565b6040516020818303038152906040529050919050565b600033905090565b606060008203610ecd576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610fe1565b600082905060005b60008214610eff578080610ee890612381565b915050600a82610ef89190612229565b9150610ed5565b60008167ffffffffffffffff811115610f1b57610f1a61104b565b5b6040519080825280601f01601f191660200182016040528015610f4d5781602001600182028036833780820191505090505b5090505b60008514610fda57600182610f6691906123c9565b9150600a85610f7591906123fd565b6030610f8191906121a4565b60f81b818381518110610f9757610f9661242e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610fd39190612229565b9450610f51565b8093505050505b919050565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110838261103a565b810181811067ffffffffffffffff821117156110a2576110a161104b565b5b80604052505050565b60006110b561101c565b90506110c1828261107a565b919050565b600067ffffffffffffffff8211156110e1576110e061104b565b5b6110ea8261103a565b9050602081019050919050565b82818337600083830152505050565b6000611119611114846110c6565b6110ab565b90508281526020810184848401111561113557611134611035565b5b6111408482856110f7565b509392505050565b600082601f83011261115d5761115c611030565b5b813561116d848260208601611106565b91505092915050565b60006020828403121561118c5761118b611026565b5b600082013567ffffffffffffffff8111156111aa576111a961102b565b5b6111b684828501611148565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111f95780820151818401526020810190506111de565b83811115611208576000848401525b50505050565b6000611219826111bf565b61122381856111ca565b93506112338185602086016111db565b61123c8161103a565b840191505092915050565b60006020820190508181036000830152611261818461120e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061129482611269565b9050919050565b6112a481611289565b81146112af57600080fd5b50565b6000813590506112c18161129b565b92915050565b6000602082840312156112dd576112dc611026565b5b60006112eb848285016112b2565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156113195761131861104b565b5b6113228261103a565b9050602081019050919050565b600061134261133d846112fe565b6110ab565b90508281526020810184848401111561135e5761135d611035565b5b6113698482856110f7565b509392505050565b600082601f83011261138657611385611030565b5b813561139684826020860161132f565b91505092915050565b600060c082840312156113b5576113b46112f4565b5b6113bf60c06110ab565b9050600082013567ffffffffffffffff8111156113df576113de6112f9565b5b6113eb84828501611371565b600083015250602082013567ffffffffffffffff81111561140f5761140e6112f9565b5b61141b84828501611371565b602083015250604082013567ffffffffffffffff81111561143f5761143e6112f9565b5b61144b84828501611371565b604083015250606082013567ffffffffffffffff81111561146f5761146e6112f9565b5b61147b84828501611371565b606083015250608082013567ffffffffffffffff81111561149f5761149e6112f9565b5b6114ab84828501611371565b60808301525060a082013567ffffffffffffffff8111156114cf576114ce6112f9565b5b6114db84828501611371565b60a08301525092915050565b6000602082840312156114fd576114fc611026565b5b600082013567ffffffffffffffff81111561151b5761151a61102b565b5b6115278482850161139f565b91505092915050565b61153981611289565b82525050565b60006020820190506115546000830184611530565b92915050565b600082825260208201905092915050565b6000611576826111bf565b611580818561155a565b93506115908185602086016111db565b6115998161103a565b840191505092915050565b600060c08301600083015184820360008601526115c1828261156b565b915050602083015184820360208601526115db828261156b565b915050604083015184820360408601526115f5828261156b565b9150506060830151848203606086015261160f828261156b565b91505060808301518482036080860152611629828261156b565b91505060a083015184820360a0860152611643828261156b565b9150508091505092915050565b6000602082019050818103600083015261166a81846115a4565b905092915050565b6000819050919050565b61168581611672565b811461169057600080fd5b50565b6000813590506116a28161167c565b92915050565b6000806000606084860312156116c1576116c0611026565b5b60006116cf86828701611693565b935050602084013567ffffffffffffffff8111156116f0576116ef61102b565b5b6116fc86828701611148565b925050604084013567ffffffffffffffff81111561171d5761171c61102b565b5b61172986828701611148565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b600061175a82611733565b611764818561173e565b93506117748185602086016111db565b61177d8161103a565b840191505092915050565b600060208201905081810360008301526117a2818461174f565b905092915050565b60006117bd6117b8846112fe565b6110ab565b9050828152602081018484840111156117d9576117d8611035565b5b6117e48482856111db565b509392505050565b600082601f83011261180157611800611030565b5b81516118118482602086016117aa565b91505092915050565b6000602082840312156118305761182f611026565b5b600082015167ffffffffffffffff81111561184e5761184d61102b565b5b61185a848285016117ec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118aa57607f821691505b6020821081036118bd576118bc611863565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118e8565b61192f86836118e8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061196c61196761196284611672565b611947565b611672565b9050919050565b6000819050919050565b61198683611951565b61199a61199282611973565b8484546118f5565b825550505050565b600090565b6119af6119a2565b6119ba81848461197d565b505050565b5b818110156119de576119d36000826119a7565b6001810190506119c0565b5050565b601f821115611a23576119f4816118c3565b6119fd846118d8565b81016020851015611a0c578190505b611a20611a18856118d8565b8301826119bf565b50505b505050565b600082821c905092915050565b6000611a4660001984600802611a28565b1980831691505092915050565b6000611a5f8383611a35565b9150826002028217905092915050565b611a78826111bf565b67ffffffffffffffff811115611a9157611a9061104b565b5b611a9b8254611892565b611aa68282856119e2565b600060209050601f831160018114611ad95760008415611ac7578287015190505b611ad18582611a53565b865550611b39565b601f198416611ae7866118c3565b60005b82811015611b0f57848901518255600182019150602085019450602081019050611aea565b86831015611b2c5784890151611b28601f891682611a35565b8355505b6001600288020188555050505b505050505050565b7f7b226e616d65223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b60008154611ba581611892565b611baf8186611b8d565b94506001821660008114611bca5760018114611bdf57611c12565b60ff1983168652811515820286019350611c12565b611be8856118c3565b60005b83811015611c0a57815481890152600182019150602081019050611beb565b838801955050505b50505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f226465736372697074696f6e223a000000000000000000000000000000000000815250565b7f22696d616765223a000000000000000000000000000000000000000000000000815250565b7f2265787465726e616c4c696e6b223a0000000000000000000000000000000000815250565b7f2273656c6c65724665654261736973506f696e7473223a000000000000000000815250565b7f22666565526563697069656e74223a0000000000000000000000000000000000815250565b7f7d00000000000000000000000000000000000000000000000000000000000000815250565b6000611d3082611b41565b600882019150611d3f82611b67565b600182019150611d4f8289611b98565b9150611d5a82611c1b565b600282019150611d6982611c41565b600e82019150611d7882611b67565b600182019150611d888288611b98565b9150611d9382611c1b565b600282019150611da282611c67565b600882019150611db182611b67565b600182019150611dc18287611b98565b9150611dcc82611c1b565b600282019150611ddb82611c8d565b600f82019150611dea82611b67565b600182019150611dfa8286611b98565b9150611e0582611c1b565b600282019150611e1482611cb3565b601782019150611e2382611b67565b600182019150611e338285611b98565b9150611e3e82611c1b565b600282019150611e4d82611cd9565b600f82019150611e5c82611b67565b600182019150611e6c8284611b98565b9150611e7782611b67565b600182019150611e8682611cff565b600182019150819050979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000611ed0601d83611b8d565b9150611edb82611e9a565b601d82019050919050565b6000611ef1826111bf565b611efb8185611b8d565b9350611f0b8185602086016111db565b80840191505092915050565b6000611f2282611ec3565b9150611f2e8284611ee6565b915081905092915050565b7f2261747472696275746573223a205b0000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b6000611f9082611b41565b600882019150611f9f82611b67565b600182019150611faf8287611ee6565b9150611fba82611c1b565b600282019150611fc982611c41565b600e82019150611fd882611b67565b600182019150611fe88286611ee6565b9150611ff382611c1b565b60028201915061200282611c67565b60088201915061201182611b67565b6001820191506120218285611ee6565b915061202c82611c1b565b60028201915061203b82611f39565b600f8201915061204b8284611ee6565b915061205682611f5f565b60018201915061206582611cff565b60018201915081905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006120d36026836111ca565b91506120de82612077565b604082019050919050565b60006020820190508181036000830152612102816120c6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061213f6020836111ca565b915061214a82612109565b602082019050919050565b6000602082019050818103600083015261216e81612132565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121af82611672565b91506121ba83611672565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121ef576121ee612175565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061223482611672565b915061223f83611672565b92508261224f5761224e6121fa565b5b828204905092915050565b600061226582611672565b915061227083611672565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156122a9576122a8612175565b5b828202905092915050565b7f4578616d706c6520230000000000000000000000000000000000000000000000815250565b60006122e5826122b4565b6009820191506122f58284611ee6565b915081905092915050565b7f4d656d6265722023000000000000000000000000000000000000000000000000815250565b7f206f66204578616d706c652e0000000000000000000000000000000000000000815250565b600061235782612300565b6008820191506123678284611ee6565b915061237282612326565b600c8201915081905092915050565b600061238c82611672565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123be576123bd612175565b5b600182019050919050565b60006123d482611672565b91506123df83611672565b9250828210156123f2576123f1612175565b5b828203905092915050565b600061240882611672565b915061241383611672565b925082612423576124226121fa565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205f81a9243b36ad20afb2fe5d4f78ed6800aea4001b5df9e619c9750fa440720864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639a17092a116100715780639a17092a14610167578063a3f22a2014610185578063ae70ed13146101a3578063d12bcb12146101bf578063f0679616146101dd578063f2fde38b1461020d576100b4565b8063316df61e146100b95780633ee6fa92146100e957806357e30f4414610105578063715018a614610121578063725fa09c1461012b5780638da5cb5b14610149575b600080fd5b6100d360048036038101906100ce9190611176565b610229565b6040516100e09190611247565b60405180910390f35b61010360048036038101906100fe91906112c7565b6102d3565b005b61011f600480360381019061011a91906114e7565b610356565b005b610129610422565b005b610133610436565b6040516101409190611247565b60405180910390f35b6101516104a5565b60405161015e919061153f565b60405180910390f35b61016f6104ce565b60405161017c919061153f565b60405180910390f35b61018d6104f8565b60405161019a919061153f565b60405180910390f35b6101bd60048036038101906101b891906112c7565b610522565b005b6101c76105a5565b6040516101d49190611650565b60405180910390f35b6101f760048036038101906101f291906116a8565b61092b565b6040516102049190611247565b60405180910390f35b610227600480360381019061022291906112c7565b610adf565b005b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663316df61e836040518263ffffffff1660e01b81526004016102869190611788565b600060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102cc919061181a565b9050919050565b6102db610b62565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f10c0817f42b2182992d55b707430b153f12e59d7e54a975bfec790497dd7f63f8160405161034b919061153f565b60405180910390a150565b61035e610b62565b80600360008201518160000190816103769190611a6f565b50602082015181600101908161038c9190611a6f565b5060408201518160020190816103a29190611a6f565b5060608201518160030190816103b89190611a6f565b5060808201518160040190816103ce9190611a6f565b5060a08201518160050190816103e49190611a6f565b509050507f03a10335d532669eac03b3b7e4ce44aff7f8cb14b7aa397c653fdcb40ae06bec816040516104179190611650565b60405180910390a150565b61042a610b62565b6104346000610be0565b565b6060610481600360000160036001016003600201600380016003600401600360050160405160200161046d96959493929190611d25565b604051602081830303815290604052610ca4565b6040516020016104919190611f17565b604051602081830303815290604052905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61052a610b62565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3c2715cb5e4b39dd4af38ac12bb292a030fb6a063dbd5467ed49da665bcaa9738160405161059a919061153f565b60405180910390a150565b6105ad610fe6565b60036040518060c00160405290816000820180546105ca90611892565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690611892565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b5050505050815260200160018201805461065c90611892565b80601f016020809104026020016040519081016040528092919081815260200182805461068890611892565b80156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b505050505081526020016002820180546106ee90611892565b80601f016020809104026020016040519081016040528092919081815260200182805461071a90611892565b80156107675780601f1061073c57610100808354040283529160200191610767565b820191906000526020600020905b81548152906001019060200180831161074a57829003601f168201915b5050505050815260200160038201805461078090611892565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac90611892565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b5050505050815260200160048201805461081290611892565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90611892565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b505050505081526020016005820180546108a490611892565b80601f01602080910402602001604051908101604052809291908181526020018280546108d090611892565b801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b505050505081525050905090565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663316df61e856040518263ffffffff1660e01b815260040161098a9190611788565b600060405180830381865afa1580156109a7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d0919061181a565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6559a6b856040518263ffffffff1660e01b8152600401610a2f9190611788565b600060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a75919061181a565b9050610ab5610a8387610e1c565b610a8c88610e4d565b8484604051602001610aa19493929190611f85565b604051602081830303815290604052610ca4565b604051602001610ac59190611f17565b604051602081830303815290604052925050509392505050565b610ae7610b62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d906120e9565b60405180910390fd5b610b5f81610be0565b50565b610b6a610e7e565b73ffffffffffffffffffffffffffffffffffffffff16610b886104a5565b73ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590612155565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606000825103610cc657604051806020016040528060008152509050610e17565b600060405180606001604052806040815260200161245e6040913990506000600360028551610cf591906121a4565b610cff9190612229565b6004610d0b919061225a565b90506000602082610d1c91906121a4565b67ffffffffffffffff811115610d3557610d3461104b565b5b6040519080825280601f01601f191660200182016040528015610d675781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610dd6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610d7b565b600389510660018114610df05760028114610e0057610e0b565b613d3d60f01b6002830352610e0b565b603d60f81b60018303525b50505050508093505050505b919050565b6060610e2782610e86565b604051602001610e3791906122da565b6040516020818303038152906040529050919050565b6060610e5882610e86565b604051602001610e68919061234c565b6040516020818303038152906040529050919050565b600033905090565b606060008203610ecd576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610fe1565b600082905060005b60008214610eff578080610ee890612381565b915050600a82610ef89190612229565b9150610ed5565b60008167ffffffffffffffff811115610f1b57610f1a61104b565b5b6040519080825280601f01601f191660200182016040528015610f4d5781602001600182028036833780820191505090505b5090505b60008514610fda57600182610f6691906123c9565b9150600a85610f7591906123fd565b6030610f8191906121a4565b60f81b818381518110610f9757610f9661242e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610fd39190612229565b9450610f51565b8093505050505b919050565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110838261103a565b810181811067ffffffffffffffff821117156110a2576110a161104b565b5b80604052505050565b60006110b561101c565b90506110c1828261107a565b919050565b600067ffffffffffffffff8211156110e1576110e061104b565b5b6110ea8261103a565b9050602081019050919050565b82818337600083830152505050565b6000611119611114846110c6565b6110ab565b90508281526020810184848401111561113557611134611035565b5b6111408482856110f7565b509392505050565b600082601f83011261115d5761115c611030565b5b813561116d848260208601611106565b91505092915050565b60006020828403121561118c5761118b611026565b5b600082013567ffffffffffffffff8111156111aa576111a961102b565b5b6111b684828501611148565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111f95780820151818401526020810190506111de565b83811115611208576000848401525b50505050565b6000611219826111bf565b61122381856111ca565b93506112338185602086016111db565b61123c8161103a565b840191505092915050565b60006020820190508181036000830152611261818461120e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061129482611269565b9050919050565b6112a481611289565b81146112af57600080fd5b50565b6000813590506112c18161129b565b92915050565b6000602082840312156112dd576112dc611026565b5b60006112eb848285016112b2565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156113195761131861104b565b5b6113228261103a565b9050602081019050919050565b600061134261133d846112fe565b6110ab565b90508281526020810184848401111561135e5761135d611035565b5b6113698482856110f7565b509392505050565b600082601f83011261138657611385611030565b5b813561139684826020860161132f565b91505092915050565b600060c082840312156113b5576113b46112f4565b5b6113bf60c06110ab565b9050600082013567ffffffffffffffff8111156113df576113de6112f9565b5b6113eb84828501611371565b600083015250602082013567ffffffffffffffff81111561140f5761140e6112f9565b5b61141b84828501611371565b602083015250604082013567ffffffffffffffff81111561143f5761143e6112f9565b5b61144b84828501611371565b604083015250606082013567ffffffffffffffff81111561146f5761146e6112f9565b5b61147b84828501611371565b606083015250608082013567ffffffffffffffff81111561149f5761149e6112f9565b5b6114ab84828501611371565b60808301525060a082013567ffffffffffffffff8111156114cf576114ce6112f9565b5b6114db84828501611371565b60a08301525092915050565b6000602082840312156114fd576114fc611026565b5b600082013567ffffffffffffffff81111561151b5761151a61102b565b5b6115278482850161139f565b91505092915050565b61153981611289565b82525050565b60006020820190506115546000830184611530565b92915050565b600082825260208201905092915050565b6000611576826111bf565b611580818561155a565b93506115908185602086016111db565b6115998161103a565b840191505092915050565b600060c08301600083015184820360008601526115c1828261156b565b915050602083015184820360208601526115db828261156b565b915050604083015184820360408601526115f5828261156b565b9150506060830151848203606086015261160f828261156b565b91505060808301518482036080860152611629828261156b565b91505060a083015184820360a0860152611643828261156b565b9150508091505092915050565b6000602082019050818103600083015261166a81846115a4565b905092915050565b6000819050919050565b61168581611672565b811461169057600080fd5b50565b6000813590506116a28161167c565b92915050565b6000806000606084860312156116c1576116c0611026565b5b60006116cf86828701611693565b935050602084013567ffffffffffffffff8111156116f0576116ef61102b565b5b6116fc86828701611148565b925050604084013567ffffffffffffffff81111561171d5761171c61102b565b5b61172986828701611148565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b600061175a82611733565b611764818561173e565b93506117748185602086016111db565b61177d8161103a565b840191505092915050565b600060208201905081810360008301526117a2818461174f565b905092915050565b60006117bd6117b8846112fe565b6110ab565b9050828152602081018484840111156117d9576117d8611035565b5b6117e48482856111db565b509392505050565b600082601f83011261180157611800611030565b5b81516118118482602086016117aa565b91505092915050565b6000602082840312156118305761182f611026565b5b600082015167ffffffffffffffff81111561184e5761184d61102b565b5b61185a848285016117ec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118aa57607f821691505b6020821081036118bd576118bc611863565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826118e8565b61192f86836118e8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061196c61196761196284611672565b611947565b611672565b9050919050565b6000819050919050565b61198683611951565b61199a61199282611973565b8484546118f5565b825550505050565b600090565b6119af6119a2565b6119ba81848461197d565b505050565b5b818110156119de576119d36000826119a7565b6001810190506119c0565b5050565b601f821115611a23576119f4816118c3565b6119fd846118d8565b81016020851015611a0c578190505b611a20611a18856118d8565b8301826119bf565b50505b505050565b600082821c905092915050565b6000611a4660001984600802611a28565b1980831691505092915050565b6000611a5f8383611a35565b9150826002028217905092915050565b611a78826111bf565b67ffffffffffffffff811115611a9157611a9061104b565b5b611a9b8254611892565b611aa68282856119e2565b600060209050601f831160018114611ad95760008415611ac7578287015190505b611ad18582611a53565b865550611b39565b601f198416611ae7866118c3565b60005b82811015611b0f57848901518255600182019150602085019450602081019050611aea565b86831015611b2c5784890151611b28601f891682611a35565b8355505b6001600288020188555050505b505050505050565b7f7b226e616d65223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b600081905092915050565b60008154611ba581611892565b611baf8186611b8d565b94506001821660008114611bca5760018114611bdf57611c12565b60ff1983168652811515820286019350611c12565b611be8856118c3565b60005b83811015611c0a57815481890152600182019150602081019050611beb565b838801955050505b50505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f226465736372697074696f6e223a000000000000000000000000000000000000815250565b7f22696d616765223a000000000000000000000000000000000000000000000000815250565b7f2265787465726e616c4c696e6b223a0000000000000000000000000000000000815250565b7f2273656c6c65724665654261736973506f696e7473223a000000000000000000815250565b7f22666565526563697069656e74223a0000000000000000000000000000000000815250565b7f7d00000000000000000000000000000000000000000000000000000000000000815250565b6000611d3082611b41565b600882019150611d3f82611b67565b600182019150611d4f8289611b98565b9150611d5a82611c1b565b600282019150611d6982611c41565b600e82019150611d7882611b67565b600182019150611d888288611b98565b9150611d9382611c1b565b600282019150611da282611c67565b600882019150611db182611b67565b600182019150611dc18287611b98565b9150611dcc82611c1b565b600282019150611ddb82611c8d565b600f82019150611dea82611b67565b600182019150611dfa8286611b98565b9150611e0582611c1b565b600282019150611e1482611cb3565b601782019150611e2382611b67565b600182019150611e338285611b98565b9150611e3e82611c1b565b600282019150611e4d82611cd9565b600f82019150611e5c82611b67565b600182019150611e6c8284611b98565b9150611e7782611b67565b600182019150611e8682611cff565b600182019150819050979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000611ed0601d83611b8d565b9150611edb82611e9a565b601d82019050919050565b6000611ef1826111bf565b611efb8185611b8d565b9350611f0b8185602086016111db565b80840191505092915050565b6000611f2282611ec3565b9150611f2e8284611ee6565b915081905092915050565b7f2261747472696275746573223a205b0000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b6000611f9082611b41565b600882019150611f9f82611b67565b600182019150611faf8287611ee6565b9150611fba82611c1b565b600282019150611fc982611c41565b600e82019150611fd882611b67565b600182019150611fe88286611ee6565b9150611ff382611c1b565b60028201915061200282611c67565b60088201915061201182611b67565b6001820191506120218285611ee6565b915061202c82611c1b565b60028201915061203b82611f39565b600f8201915061204b8284611ee6565b915061205682611f5f565b60018201915061206582611cff565b60018201915081905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006120d36026836111ca565b91506120de82612077565b604082019050919050565b60006020820190508181036000830152612102816120c6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061213f6020836111ca565b915061214a82612109565b602082019050919050565b6000602082019050818103600083015261216e81612132565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121af82611672565b91506121ba83611672565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121ef576121ee612175565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061223482611672565b915061223f83611672565b92508261224f5761224e6121fa565b5b828204905092915050565b600061226582611672565b915061227083611672565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156122a9576122a8612175565b5b828202905092915050565b7f4578616d706c6520230000000000000000000000000000000000000000000000815250565b60006122e5826122b4565b6009820191506122f58284611ee6565b915081905092915050565b7f4d656d6265722023000000000000000000000000000000000000000000000000815250565b7f206f66204578616d706c652e0000000000000000000000000000000000000000815250565b600061235782612300565b6008820191506123678284611ee6565b915061237282612326565b600c8201915081905092915050565b600061238c82611672565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123be576123bd612175565b5b600182019050919050565b60006123d482611672565b91506123df83611672565b9250828210156123f2576123f1612175565b5b828203905092915050565b600061240882611672565b915061241383611672565b925082612423576124226121fa565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205f81a9243b36ad20afb2fe5d4f78ed6800aea4001b5df9e619c9750fa440720864736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ImpactCardStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2008,
        "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16,
        "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
        "label": "_svgRender",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
        "label": "_traitsFetch",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21,
        "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
        "label": "_contractURI",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(ContractURI)34_storage"
      },
      {
        "astId": 9346,
        "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContractURI)34_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage.ContractURI",
        "members": [
          {
            "astId": 23,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 27,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "externalLink",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "sellerFeeBasisPoints",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 33,
            "contract": "contracts/ImpactCardStorage.sol:ImpactCardStorage",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}